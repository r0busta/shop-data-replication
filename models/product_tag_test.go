// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testProductTags(t *testing.T) {
	t.Parallel()

	query := ProductTags()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testProductTagsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductTag{}
	if err = randomize.Struct(seed, o, productTagDBTypes, true, productTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProductTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProductTagsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductTag{}
	if err = randomize.Struct(seed, o, productTagDBTypes, true, productTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ProductTags().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProductTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProductTagsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductTag{}
	if err = randomize.Struct(seed, o, productTagDBTypes, true, productTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProductTagSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProductTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProductTagsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductTag{}
	if err = randomize.Struct(seed, o, productTagDBTypes, true, productTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ProductTagExists(ctx, tx, o.TagID, o.ProductID)
	if err != nil {
		t.Errorf("Unable to check if ProductTag exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ProductTagExists to return true, but got false.")
	}
}

func testProductTagsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductTag{}
	if err = randomize.Struct(seed, o, productTagDBTypes, true, productTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	productTagFound, err := FindProductTag(ctx, tx, o.TagID, o.ProductID)
	if err != nil {
		t.Error(err)
	}

	if productTagFound == nil {
		t.Error("want a record, got nil")
	}
}

func testProductTagsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductTag{}
	if err = randomize.Struct(seed, o, productTagDBTypes, true, productTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ProductTags().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testProductTagsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductTag{}
	if err = randomize.Struct(seed, o, productTagDBTypes, true, productTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ProductTags().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testProductTagsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	productTagOne := &ProductTag{}
	productTagTwo := &ProductTag{}
	if err = randomize.Struct(seed, productTagOne, productTagDBTypes, false, productTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductTag struct: %s", err)
	}
	if err = randomize.Struct(seed, productTagTwo, productTagDBTypes, false, productTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = productTagOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = productTagTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProductTags().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testProductTagsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	productTagOne := &ProductTag{}
	productTagTwo := &ProductTag{}
	if err = randomize.Struct(seed, productTagOne, productTagDBTypes, false, productTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductTag struct: %s", err)
	}
	if err = randomize.Struct(seed, productTagTwo, productTagDBTypes, false, productTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = productTagOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = productTagTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProductTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func productTagBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProductTag) error {
	*o = ProductTag{}
	return nil
}

func productTagAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProductTag) error {
	*o = ProductTag{}
	return nil
}

func productTagAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ProductTag) error {
	*o = ProductTag{}
	return nil
}

func productTagBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProductTag) error {
	*o = ProductTag{}
	return nil
}

func productTagAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProductTag) error {
	*o = ProductTag{}
	return nil
}

func productTagBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProductTag) error {
	*o = ProductTag{}
	return nil
}

func productTagAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProductTag) error {
	*o = ProductTag{}
	return nil
}

func productTagBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProductTag) error {
	*o = ProductTag{}
	return nil
}

func productTagAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProductTag) error {
	*o = ProductTag{}
	return nil
}

func testProductTagsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ProductTag{}
	o := &ProductTag{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, productTagDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ProductTag object: %s", err)
	}

	AddProductTagHook(boil.BeforeInsertHook, productTagBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	productTagBeforeInsertHooks = []ProductTagHook{}

	AddProductTagHook(boil.AfterInsertHook, productTagAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	productTagAfterInsertHooks = []ProductTagHook{}

	AddProductTagHook(boil.AfterSelectHook, productTagAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	productTagAfterSelectHooks = []ProductTagHook{}

	AddProductTagHook(boil.BeforeUpdateHook, productTagBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	productTagBeforeUpdateHooks = []ProductTagHook{}

	AddProductTagHook(boil.AfterUpdateHook, productTagAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	productTagAfterUpdateHooks = []ProductTagHook{}

	AddProductTagHook(boil.BeforeDeleteHook, productTagBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	productTagBeforeDeleteHooks = []ProductTagHook{}

	AddProductTagHook(boil.AfterDeleteHook, productTagAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	productTagAfterDeleteHooks = []ProductTagHook{}

	AddProductTagHook(boil.BeforeUpsertHook, productTagBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	productTagBeforeUpsertHooks = []ProductTagHook{}

	AddProductTagHook(boil.AfterUpsertHook, productTagAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	productTagAfterUpsertHooks = []ProductTagHook{}
}

func testProductTagsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductTag{}
	if err = randomize.Struct(seed, o, productTagDBTypes, true, productTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProductTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProductTagsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductTag{}
	if err = randomize.Struct(seed, o, productTagDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ProductTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(productTagColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ProductTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProductTagToOneTagUsingTag(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ProductTag
	var foreign Tag

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, productTagDBTypes, false, productTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductTag struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, tagDBTypes, false, tagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TagID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Tag().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ProductTagSlice{&local}
	if err = local.L.LoadTag(ctx, tx, false, (*[]*ProductTag)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Tag == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Tag = nil
	if err = local.L.LoadTag(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Tag == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testProductTagToOneProductUsingProduct(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ProductTag
	var foreign Product

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, productTagDBTypes, false, productTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductTag struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, productDBTypes, false, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ProductID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Product().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ProductTagSlice{&local}
	if err = local.L.LoadProduct(ctx, tx, false, (*[]*ProductTag)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Product == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Product = nil
	if err = local.L.LoadProduct(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Product == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testProductTagToOneSetOpTagUsingTag(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductTag
	var b, c Tag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productTagDBTypes, false, strmangle.SetComplement(productTagPrimaryKeyColumns, productTagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tagDBTypes, false, strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tagDBTypes, false, strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Tag{&b, &c} {
		err = a.SetTag(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Tag != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProductTags[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TagID != x.ID {
			t.Error("foreign key was wrong value", a.TagID)
		}

		if exists, err := ProductTagExists(ctx, tx, a.TagID, a.ProductID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testProductTagToOneSetOpProductUsingProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductTag
	var b, c Product

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productTagDBTypes, false, strmangle.SetComplement(productTagPrimaryKeyColumns, productTagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Product{&b, &c} {
		err = a.SetProduct(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Product != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProductTags[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ProductID != x.ID {
			t.Error("foreign key was wrong value", a.ProductID)
		}

		if exists, err := ProductTagExists(ctx, tx, a.TagID, a.ProductID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testProductTagsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductTag{}
	if err = randomize.Struct(seed, o, productTagDBTypes, true, productTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProductTagsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductTag{}
	if err = randomize.Struct(seed, o, productTagDBTypes, true, productTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProductTagSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProductTagsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductTag{}
	if err = randomize.Struct(seed, o, productTagDBTypes, true, productTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProductTags().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	productTagDBTypes = map[string]string{`TagID`: `bigint`, `ProductID`: `bigint`, `Value`: `varchar`}
	_                 = bytes.MinRead
)

func testProductTagsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(productTagPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(productTagAllColumns) == len(productTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProductTag{}
	if err = randomize.Struct(seed, o, productTagDBTypes, true, productTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProductTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, productTagDBTypes, true, productTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProductTag struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testProductTagsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(productTagAllColumns) == len(productTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProductTag{}
	if err = randomize.Struct(seed, o, productTagDBTypes, true, productTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProductTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, productTagDBTypes, true, productTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProductTag struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(productTagAllColumns, productTagPrimaryKeyColumns) {
		fields = productTagAllColumns
	} else {
		fields = strmangle.SetComplement(
			productTagAllColumns,
			productTagPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ProductTagSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testProductTagsUpsert(t *testing.T) {
	t.Parallel()

	if len(productTagAllColumns) == len(productTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLProductTagUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ProductTag{}
	if err = randomize.Struct(seed, &o, productTagDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ProductTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProductTag: %s", err)
	}

	count, err := ProductTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, productTagDBTypes, false, productTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProductTag struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProductTag: %s", err)
	}

	count, err = ProductTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
