// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Image is an object representing the database table.
type Image struct {
	ID        int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	Height    null.Int    `boil:"height" json:"height,omitempty" toml:"height" yaml:"height,omitempty"`
	SRC       null.String `boil:"src" json:"src,omitempty" toml:"src" yaml:"src,omitempty"`
	UpdatedAt null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Width     null.Int    `boil:"width" json:"width,omitempty" toml:"width" yaml:"width,omitempty"`

	R *imageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L imageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ImageColumns = struct {
	ID        string
	CreatedAt string
	Height    string
	SRC       string
	UpdatedAt string
	Width     string
}{
	ID:        "id",
	CreatedAt: "created_at",
	Height:    "height",
	SRC:       "src",
	UpdatedAt: "updated_at",
	Width:     "width",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ImageWhere = struct {
	ID        whereHelperint64
	CreatedAt whereHelpernull_Time
	Height    whereHelpernull_Int
	SRC       whereHelpernull_String
	UpdatedAt whereHelpernull_Time
	Width     whereHelpernull_Int
}{
	ID:        whereHelperint64{field: "`image`.`id`"},
	CreatedAt: whereHelpernull_Time{field: "`image`.`created_at`"},
	Height:    whereHelpernull_Int{field: "`image`.`height`"},
	SRC:       whereHelpernull_String{field: "`image`.`src`"},
	UpdatedAt: whereHelpernull_Time{field: "`image`.`updated_at`"},
	Width:     whereHelpernull_Int{field: "`image`.`width`"},
}

// ImageRels is where relationship names are stored.
var ImageRels = struct {
	Collections                  string
	ProductImages                string
	ProductVariants              string
	InventoryItemProductVariants string
}{
	Collections:                  "Collections",
	ProductImages:                "ProductImages",
	ProductVariants:              "ProductVariants",
	InventoryItemProductVariants: "InventoryItemProductVariants",
}

// imageR is where relationships are stored.
type imageR struct {
	Collections                  CollectionSlice     `boil:"Collections" json:"Collections" toml:"Collections" yaml:"Collections"`
	ProductImages                ProductImageSlice   `boil:"ProductImages" json:"ProductImages" toml:"ProductImages" yaml:"ProductImages"`
	ProductVariants              ProductVariantSlice `boil:"ProductVariants" json:"ProductVariants" toml:"ProductVariants" yaml:"ProductVariants"`
	InventoryItemProductVariants ProductVariantSlice `boil:"InventoryItemProductVariants" json:"InventoryItemProductVariants" toml:"InventoryItemProductVariants" yaml:"InventoryItemProductVariants"`
}

// NewStruct creates a new relationship struct
func (*imageR) NewStruct() *imageR {
	return &imageR{}
}

// imageL is where Load methods for each relationship are stored.
type imageL struct{}

var (
	imageAllColumns            = []string{"id", "created_at", "height", "src", "updated_at", "width"}
	imageColumnsWithoutDefault = []string{"id", "created_at", "height", "src", "updated_at", "width"}
	imageColumnsWithDefault    = []string{}
	imagePrimaryKeyColumns     = []string{"id"}
)

type (
	// ImageSlice is an alias for a slice of pointers to Image.
	// This should generally be used opposed to []Image.
	ImageSlice []*Image
	// ImageHook is the signature for custom Image hook methods
	ImageHook func(context.Context, boil.ContextExecutor, *Image) error

	imageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	imageType                 = reflect.TypeOf(&Image{})
	imageMapping              = queries.MakeStructMapping(imageType)
	imagePrimaryKeyMapping, _ = queries.BindMapping(imageType, imageMapping, imagePrimaryKeyColumns)
	imageInsertCacheMut       sync.RWMutex
	imageInsertCache          = make(map[string]insertCache)
	imageUpdateCacheMut       sync.RWMutex
	imageUpdateCache          = make(map[string]updateCache)
	imageUpsertCacheMut       sync.RWMutex
	imageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var imageBeforeInsertHooks []ImageHook
var imageBeforeUpdateHooks []ImageHook
var imageBeforeDeleteHooks []ImageHook
var imageBeforeUpsertHooks []ImageHook

var imageAfterInsertHooks []ImageHook
var imageAfterSelectHooks []ImageHook
var imageAfterUpdateHooks []ImageHook
var imageAfterDeleteHooks []ImageHook
var imageAfterUpsertHooks []ImageHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Image) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range imageBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Image) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range imageBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Image) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range imageBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Image) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range imageBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Image) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range imageAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Image) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range imageAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Image) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range imageAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Image) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range imageAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Image) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range imageAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddImageHook registers your hook function for all future operations.
func AddImageHook(hookPoint boil.HookPoint, imageHook ImageHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		imageBeforeInsertHooks = append(imageBeforeInsertHooks, imageHook)
	case boil.BeforeUpdateHook:
		imageBeforeUpdateHooks = append(imageBeforeUpdateHooks, imageHook)
	case boil.BeforeDeleteHook:
		imageBeforeDeleteHooks = append(imageBeforeDeleteHooks, imageHook)
	case boil.BeforeUpsertHook:
		imageBeforeUpsertHooks = append(imageBeforeUpsertHooks, imageHook)
	case boil.AfterInsertHook:
		imageAfterInsertHooks = append(imageAfterInsertHooks, imageHook)
	case boil.AfterSelectHook:
		imageAfterSelectHooks = append(imageAfterSelectHooks, imageHook)
	case boil.AfterUpdateHook:
		imageAfterUpdateHooks = append(imageAfterUpdateHooks, imageHook)
	case boil.AfterDeleteHook:
		imageAfterDeleteHooks = append(imageAfterDeleteHooks, imageHook)
	case boil.AfterUpsertHook:
		imageAfterUpsertHooks = append(imageAfterUpsertHooks, imageHook)
	}
}

// One returns a single image record from the query.
func (q imageQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Image, error) {
	o := &Image{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for image")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Image records from the query.
func (q imageQuery) All(ctx context.Context, exec boil.ContextExecutor) (ImageSlice, error) {
	var o []*Image

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Image slice")
	}

	if len(imageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Image records in the query.
func (q imageQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count image rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q imageQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if image exists")
	}

	return count > 0, nil
}

// Collections retrieves all the collection's Collections with an executor.
func (o *Image) Collections(mods ...qm.QueryMod) collectionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`collection`.`image_id`=?", o.ID),
	)

	query := Collections(queryMods...)
	queries.SetFrom(query.Query, "`collection`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`collection`.*"})
	}

	return query
}

// ProductImages retrieves all the product_image's ProductImages with an executor.
func (o *Image) ProductImages(mods ...qm.QueryMod) productImageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`product_image`.`image_id`=?", o.ID),
	)

	query := ProductImages(queryMods...)
	queries.SetFrom(query.Query, "`product_image`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`product_image`.*"})
	}

	return query
}

// ProductVariants retrieves all the product_variant's ProductVariants with an executor.
func (o *Image) ProductVariants(mods ...qm.QueryMod) productVariantQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`product_variant`.`image_id`=?", o.ID),
	)

	query := ProductVariants(queryMods...)
	queries.SetFrom(query.Query, "`product_variant`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`product_variant`.*"})
	}

	return query
}

// InventoryItemProductVariants retrieves all the product_variant's ProductVariants with an executor via inventory_item_id column.
func (o *Image) InventoryItemProductVariants(mods ...qm.QueryMod) productVariantQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`product_variant`.`inventory_item_id`=?", o.ID),
	)

	query := ProductVariants(queryMods...)
	queries.SetFrom(query.Query, "`product_variant`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`product_variant`.*"})
	}

	return query
}

// LoadCollections allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (imageL) LoadCollections(ctx context.Context, e boil.ContextExecutor, singular bool, maybeImage interface{}, mods queries.Applicator) error {
	var slice []*Image
	var object *Image

	if singular {
		object = maybeImage.(*Image)
	} else {
		slice = *maybeImage.(*[]*Image)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &imageR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &imageR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`collection`),
		qm.WhereIn(`collection.image_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load collection")
	}

	var resultSlice []*Collection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice collection")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on collection")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for collection")
	}

	if len(collectionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Collections = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &collectionR{}
			}
			foreign.R.Image = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ImageID) {
				local.R.Collections = append(local.R.Collections, foreign)
				if foreign.R == nil {
					foreign.R = &collectionR{}
				}
				foreign.R.Image = local
				break
			}
		}
	}

	return nil
}

// LoadProductImages allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (imageL) LoadProductImages(ctx context.Context, e boil.ContextExecutor, singular bool, maybeImage interface{}, mods queries.Applicator) error {
	var slice []*Image
	var object *Image

	if singular {
		object = maybeImage.(*Image)
	} else {
		slice = *maybeImage.(*[]*Image)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &imageR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &imageR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_image`),
		qm.WhereIn(`product_image.image_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load product_image")
	}

	var resultSlice []*ProductImage
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice product_image")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on product_image")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_image")
	}

	if len(productImageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductImages = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productImageR{}
			}
			foreign.R.Image = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ImageID {
				local.R.ProductImages = append(local.R.ProductImages, foreign)
				if foreign.R == nil {
					foreign.R = &productImageR{}
				}
				foreign.R.Image = local
				break
			}
		}
	}

	return nil
}

// LoadProductVariants allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (imageL) LoadProductVariants(ctx context.Context, e boil.ContextExecutor, singular bool, maybeImage interface{}, mods queries.Applicator) error {
	var slice []*Image
	var object *Image

	if singular {
		object = maybeImage.(*Image)
	} else {
		slice = *maybeImage.(*[]*Image)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &imageR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &imageR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_variant`),
		qm.WhereIn(`product_variant.image_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load product_variant")
	}

	var resultSlice []*ProductVariant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice product_variant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on product_variant")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_variant")
	}

	if len(productVariantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductVariants = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productVariantR{}
			}
			foreign.R.Image = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ImageID) {
				local.R.ProductVariants = append(local.R.ProductVariants, foreign)
				if foreign.R == nil {
					foreign.R = &productVariantR{}
				}
				foreign.R.Image = local
				break
			}
		}
	}

	return nil
}

// LoadInventoryItemProductVariants allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (imageL) LoadInventoryItemProductVariants(ctx context.Context, e boil.ContextExecutor, singular bool, maybeImage interface{}, mods queries.Applicator) error {
	var slice []*Image
	var object *Image

	if singular {
		object = maybeImage.(*Image)
	} else {
		slice = *maybeImage.(*[]*Image)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &imageR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &imageR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_variant`),
		qm.WhereIn(`product_variant.inventory_item_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load product_variant")
	}

	var resultSlice []*ProductVariant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice product_variant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on product_variant")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_variant")
	}

	if len(productVariantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.InventoryItemProductVariants = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productVariantR{}
			}
			foreign.R.InventoryItem = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.InventoryItemID) {
				local.R.InventoryItemProductVariants = append(local.R.InventoryItemProductVariants, foreign)
				if foreign.R == nil {
					foreign.R = &productVariantR{}
				}
				foreign.R.InventoryItem = local
				break
			}
		}
	}

	return nil
}

// AddCollections adds the given related objects to the existing relationships
// of the image, optionally inserting them as new records.
// Appends related to o.R.Collections.
// Sets related.R.Image appropriately.
func (o *Image) AddCollections(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Collection) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ImageID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `collection` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"image_id"}),
				strmangle.WhereClause("`", "`", 0, collectionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ImageID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &imageR{
			Collections: related,
		}
	} else {
		o.R.Collections = append(o.R.Collections, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &collectionR{
				Image: o,
			}
		} else {
			rel.R.Image = o
		}
	}
	return nil
}

// SetCollections removes all previously related items of the
// image replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Image's Collections accordingly.
// Replaces o.R.Collections with related.
// Sets related.R.Image's Collections accordingly.
func (o *Image) SetCollections(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Collection) error {
	query := "update `collection` set `image_id` = null where `image_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Collections {
			queries.SetScanner(&rel.ImageID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Image = nil
		}

		o.R.Collections = nil
	}
	return o.AddCollections(ctx, exec, insert, related...)
}

// RemoveCollections relationships from objects passed in.
// Removes related items from R.Collections (uses pointer comparison, removal does not keep order)
// Sets related.R.Image.
func (o *Image) RemoveCollections(ctx context.Context, exec boil.ContextExecutor, related ...*Collection) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ImageID, nil)
		if rel.R != nil {
			rel.R.Image = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("image_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Collections {
			if rel != ri {
				continue
			}

			ln := len(o.R.Collections)
			if ln > 1 && i < ln-1 {
				o.R.Collections[i] = o.R.Collections[ln-1]
			}
			o.R.Collections = o.R.Collections[:ln-1]
			break
		}
	}

	return nil
}

// AddProductImages adds the given related objects to the existing relationships
// of the image, optionally inserting them as new records.
// Appends related to o.R.ProductImages.
// Sets related.R.Image appropriately.
func (o *Image) AddProductImages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductImage) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ImageID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `product_image` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"image_id"}),
				strmangle.WhereClause("`", "`", 0, productImagePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ProductID, rel.ImageID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ImageID = o.ID
		}
	}

	if o.R == nil {
		o.R = &imageR{
			ProductImages: related,
		}
	} else {
		o.R.ProductImages = append(o.R.ProductImages, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productImageR{
				Image: o,
			}
		} else {
			rel.R.Image = o
		}
	}
	return nil
}

// AddProductVariants adds the given related objects to the existing relationships
// of the image, optionally inserting them as new records.
// Appends related to o.R.ProductVariants.
// Sets related.R.Image appropriately.
func (o *Image) AddProductVariants(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductVariant) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ImageID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `product_variant` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"image_id"}),
				strmangle.WhereClause("`", "`", 0, productVariantPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ImageID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &imageR{
			ProductVariants: related,
		}
	} else {
		o.R.ProductVariants = append(o.R.ProductVariants, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productVariantR{
				Image: o,
			}
		} else {
			rel.R.Image = o
		}
	}
	return nil
}

// SetProductVariants removes all previously related items of the
// image replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Image's ProductVariants accordingly.
// Replaces o.R.ProductVariants with related.
// Sets related.R.Image's ProductVariants accordingly.
func (o *Image) SetProductVariants(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductVariant) error {
	query := "update `product_variant` set `image_id` = null where `image_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ProductVariants {
			queries.SetScanner(&rel.ImageID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Image = nil
		}

		o.R.ProductVariants = nil
	}
	return o.AddProductVariants(ctx, exec, insert, related...)
}

// RemoveProductVariants relationships from objects passed in.
// Removes related items from R.ProductVariants (uses pointer comparison, removal does not keep order)
// Sets related.R.Image.
func (o *Image) RemoveProductVariants(ctx context.Context, exec boil.ContextExecutor, related ...*ProductVariant) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ImageID, nil)
		if rel.R != nil {
			rel.R.Image = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("image_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductVariants {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductVariants)
			if ln > 1 && i < ln-1 {
				o.R.ProductVariants[i] = o.R.ProductVariants[ln-1]
			}
			o.R.ProductVariants = o.R.ProductVariants[:ln-1]
			break
		}
	}

	return nil
}

// AddInventoryItemProductVariants adds the given related objects to the existing relationships
// of the image, optionally inserting them as new records.
// Appends related to o.R.InventoryItemProductVariants.
// Sets related.R.InventoryItem appropriately.
func (o *Image) AddInventoryItemProductVariants(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductVariant) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.InventoryItemID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `product_variant` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"inventory_item_id"}),
				strmangle.WhereClause("`", "`", 0, productVariantPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.InventoryItemID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &imageR{
			InventoryItemProductVariants: related,
		}
	} else {
		o.R.InventoryItemProductVariants = append(o.R.InventoryItemProductVariants, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productVariantR{
				InventoryItem: o,
			}
		} else {
			rel.R.InventoryItem = o
		}
	}
	return nil
}

// SetInventoryItemProductVariants removes all previously related items of the
// image replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.InventoryItem's InventoryItemProductVariants accordingly.
// Replaces o.R.InventoryItemProductVariants with related.
// Sets related.R.InventoryItem's InventoryItemProductVariants accordingly.
func (o *Image) SetInventoryItemProductVariants(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductVariant) error {
	query := "update `product_variant` set `inventory_item_id` = null where `inventory_item_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.InventoryItemProductVariants {
			queries.SetScanner(&rel.InventoryItemID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.InventoryItem = nil
		}

		o.R.InventoryItemProductVariants = nil
	}
	return o.AddInventoryItemProductVariants(ctx, exec, insert, related...)
}

// RemoveInventoryItemProductVariants relationships from objects passed in.
// Removes related items from R.InventoryItemProductVariants (uses pointer comparison, removal does not keep order)
// Sets related.R.InventoryItem.
func (o *Image) RemoveInventoryItemProductVariants(ctx context.Context, exec boil.ContextExecutor, related ...*ProductVariant) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.InventoryItemID, nil)
		if rel.R != nil {
			rel.R.InventoryItem = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("inventory_item_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.InventoryItemProductVariants {
			if rel != ri {
				continue
			}

			ln := len(o.R.InventoryItemProductVariants)
			if ln > 1 && i < ln-1 {
				o.R.InventoryItemProductVariants[i] = o.R.InventoryItemProductVariants[ln-1]
			}
			o.R.InventoryItemProductVariants = o.R.InventoryItemProductVariants[:ln-1]
			break
		}
	}

	return nil
}

// Images retrieves all the records using an executor.
func Images(mods ...qm.QueryMod) imageQuery {
	mods = append(mods, qm.From("`image`"))
	return imageQuery{NewQuery(mods...)}
}

// FindImage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindImage(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Image, error) {
	imageObj := &Image{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `image` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, imageObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from image")
	}

	return imageObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Image) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no image provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(imageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	imageInsertCacheMut.RLock()
	cache, cached := imageInsertCache[key]
	imageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			imageAllColumns,
			imageColumnsWithDefault,
			imageColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(imageType, imageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(imageType, imageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `image` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `image` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `image` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, imagePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into image")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for image")
	}

CacheNoHooks:
	if !cached {
		imageInsertCacheMut.Lock()
		imageInsertCache[key] = cache
		imageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Image.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Image) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	imageUpdateCacheMut.RLock()
	cache, cached := imageUpdateCache[key]
	imageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			imageAllColumns,
			imagePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update image, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `image` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, imagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(imageType, imageMapping, append(wl, imagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update image row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for image")
	}

	if !cached {
		imageUpdateCacheMut.Lock()
		imageUpdateCache[key] = cache
		imageUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q imageQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for image")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for image")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ImageSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), imagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `image` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, imagePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in image slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all image")
	}
	return rowsAff, nil
}

var mySQLImageUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Image) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no image provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(imageColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLImageUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	imageUpsertCacheMut.RLock()
	cache, cached := imageUpsertCache[key]
	imageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			imageAllColumns,
			imageColumnsWithDefault,
			imageColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			imageAllColumns,
			imagePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert image, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`image`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `image` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(imageType, imageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(imageType, imageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for image")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(imageType, imageMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for image")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for image")
	}

CacheNoHooks:
	if !cached {
		imageUpsertCacheMut.Lock()
		imageUpsertCache[key] = cache
		imageUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Image record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Image) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Image provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), imagePrimaryKeyMapping)
	sql := "DELETE FROM `image` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from image")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for image")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q imageQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no imageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from image")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for image")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ImageSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(imageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), imagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `image` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, imagePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from image slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for image")
	}

	if len(imageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Image) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindImage(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ImageSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ImageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), imagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `image`.* FROM `image` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, imagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ImageSlice")
	}

	*o = slice

	return nil
}

// ImageExists checks if the Image row exists.
func ImageExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `image` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if image exists")
	}

	return exists, nil
}
