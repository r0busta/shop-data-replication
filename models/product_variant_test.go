// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testProductVariants(t *testing.T) {
	t.Parallel()

	query := ProductVariants()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testProductVariantsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductVariant{}
	if err = randomize.Struct(seed, o, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProductVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProductVariantsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductVariant{}
	if err = randomize.Struct(seed, o, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ProductVariants().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProductVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProductVariantsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductVariant{}
	if err = randomize.Struct(seed, o, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProductVariantSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProductVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProductVariantsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductVariant{}
	if err = randomize.Struct(seed, o, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ProductVariantExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ProductVariant exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ProductVariantExists to return true, but got false.")
	}
}

func testProductVariantsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductVariant{}
	if err = randomize.Struct(seed, o, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	productVariantFound, err := FindProductVariant(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if productVariantFound == nil {
		t.Error("want a record, got nil")
	}
}

func testProductVariantsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductVariant{}
	if err = randomize.Struct(seed, o, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ProductVariants().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testProductVariantsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductVariant{}
	if err = randomize.Struct(seed, o, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ProductVariants().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testProductVariantsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	productVariantOne := &ProductVariant{}
	productVariantTwo := &ProductVariant{}
	if err = randomize.Struct(seed, productVariantOne, productVariantDBTypes, false, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}
	if err = randomize.Struct(seed, productVariantTwo, productVariantDBTypes, false, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = productVariantOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = productVariantTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProductVariants().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testProductVariantsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	productVariantOne := &ProductVariant{}
	productVariantTwo := &ProductVariant{}
	if err = randomize.Struct(seed, productVariantOne, productVariantDBTypes, false, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}
	if err = randomize.Struct(seed, productVariantTwo, productVariantDBTypes, false, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = productVariantOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = productVariantTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProductVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func productVariantBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProductVariant) error {
	*o = ProductVariant{}
	return nil
}

func productVariantAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProductVariant) error {
	*o = ProductVariant{}
	return nil
}

func productVariantAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ProductVariant) error {
	*o = ProductVariant{}
	return nil
}

func productVariantBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProductVariant) error {
	*o = ProductVariant{}
	return nil
}

func productVariantAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProductVariant) error {
	*o = ProductVariant{}
	return nil
}

func productVariantBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProductVariant) error {
	*o = ProductVariant{}
	return nil
}

func productVariantAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProductVariant) error {
	*o = ProductVariant{}
	return nil
}

func productVariantBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProductVariant) error {
	*o = ProductVariant{}
	return nil
}

func productVariantAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProductVariant) error {
	*o = ProductVariant{}
	return nil
}

func testProductVariantsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ProductVariant{}
	o := &ProductVariant{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, productVariantDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ProductVariant object: %s", err)
	}

	AddProductVariantHook(boil.BeforeInsertHook, productVariantBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	productVariantBeforeInsertHooks = []ProductVariantHook{}

	AddProductVariantHook(boil.AfterInsertHook, productVariantAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	productVariantAfterInsertHooks = []ProductVariantHook{}

	AddProductVariantHook(boil.AfterSelectHook, productVariantAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	productVariantAfterSelectHooks = []ProductVariantHook{}

	AddProductVariantHook(boil.BeforeUpdateHook, productVariantBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	productVariantBeforeUpdateHooks = []ProductVariantHook{}

	AddProductVariantHook(boil.AfterUpdateHook, productVariantAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	productVariantAfterUpdateHooks = []ProductVariantHook{}

	AddProductVariantHook(boil.BeforeDeleteHook, productVariantBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	productVariantBeforeDeleteHooks = []ProductVariantHook{}

	AddProductVariantHook(boil.AfterDeleteHook, productVariantAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	productVariantAfterDeleteHooks = []ProductVariantHook{}

	AddProductVariantHook(boil.BeforeUpsertHook, productVariantBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	productVariantBeforeUpsertHooks = []ProductVariantHook{}

	AddProductVariantHook(boil.AfterUpsertHook, productVariantAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	productVariantAfterUpsertHooks = []ProductVariantHook{}
}

func testProductVariantsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductVariant{}
	if err = randomize.Struct(seed, o, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProductVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProductVariantsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductVariant{}
	if err = randomize.Struct(seed, o, productVariantDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(productVariantColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ProductVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProductVariantToManyVariantOrderLines(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c OrderLine

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, orderLineDBTypes, false, orderLineColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderLineDBTypes, false, orderLineColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.VariantID, a.ID)
	queries.Assign(&c.VariantID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.VariantOrderLines().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.VariantID, b.VariantID) {
			bFound = true
		}
		if queries.Equal(v.VariantID, c.VariantID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProductVariantSlice{&a}
	if err = a.L.LoadVariantOrderLines(ctx, tx, false, (*[]*ProductVariant)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VariantOrderLines); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.VariantOrderLines = nil
	if err = a.L.LoadVariantOrderLines(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VariantOrderLines); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProductVariantToManyAddOpVariantOrderLines(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c, d, e OrderLine

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrderLine{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderLineDBTypes, false, strmangle.SetComplement(orderLinePrimaryKeyColumns, orderLineColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OrderLine{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddVariantOrderLines(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.VariantID) {
			t.Error("foreign key was wrong value", a.ID, first.VariantID)
		}
		if !queries.Equal(a.ID, second.VariantID) {
			t.Error("foreign key was wrong value", a.ID, second.VariantID)
		}

		if first.R.Variant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Variant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.VariantOrderLines[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.VariantOrderLines[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.VariantOrderLines().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testProductVariantToManySetOpVariantOrderLines(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c, d, e OrderLine

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrderLine{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderLineDBTypes, false, strmangle.SetComplement(orderLinePrimaryKeyColumns, orderLineColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetVariantOrderLines(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.VariantOrderLines().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetVariantOrderLines(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.VariantOrderLines().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.VariantID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.VariantID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.VariantID) {
		t.Error("foreign key was wrong value", a.ID, d.VariantID)
	}
	if !queries.Equal(a.ID, e.VariantID) {
		t.Error("foreign key was wrong value", a.ID, e.VariantID)
	}

	if b.R.Variant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Variant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Variant != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Variant != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.VariantOrderLines[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.VariantOrderLines[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testProductVariantToManyRemoveOpVariantOrderLines(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c, d, e OrderLine

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrderLine{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderLineDBTypes, false, strmangle.SetComplement(orderLinePrimaryKeyColumns, orderLineColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddVariantOrderLines(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.VariantOrderLines().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveVariantOrderLines(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.VariantOrderLines().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.VariantID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.VariantID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Variant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Variant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Variant != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Variant != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.VariantOrderLines) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.VariantOrderLines[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.VariantOrderLines[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testProductVariantToOneProductUsingProduct(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ProductVariant
	var foreign Product

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, productVariantDBTypes, false, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, productDBTypes, false, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ProductID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Product().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ProductVariantSlice{&local}
	if err = local.L.LoadProduct(ctx, tx, false, (*[]*ProductVariant)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Product == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Product = nil
	if err = local.L.LoadProduct(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Product == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testProductVariantToOneProductOptionValueUsingOption1Value(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ProductVariant
	var foreign ProductOptionValue

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, productOptionValueDBTypes, false, productOptionValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOptionValue struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Option1ValueID, foreign.OptionID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Option1Value().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.OptionID, foreign.OptionID) {
		t.Errorf("want: %v, got %v", foreign.OptionID, check.OptionID)
	}

	slice := ProductVariantSlice{&local}
	if err = local.L.LoadOption1Value(ctx, tx, false, (*[]*ProductVariant)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Option1Value == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Option1Value = nil
	if err = local.L.LoadOption1Value(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Option1Value == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testProductVariantToOneProductOptionValueUsingOption2Value(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ProductVariant
	var foreign ProductOptionValue

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, productOptionValueDBTypes, false, productOptionValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOptionValue struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Option2ValueID, foreign.OptionID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Option2Value().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.OptionID, foreign.OptionID) {
		t.Errorf("want: %v, got %v", foreign.OptionID, check.OptionID)
	}

	slice := ProductVariantSlice{&local}
	if err = local.L.LoadOption2Value(ctx, tx, false, (*[]*ProductVariant)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Option2Value == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Option2Value = nil
	if err = local.L.LoadOption2Value(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Option2Value == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testProductVariantToOneProductOptionValueUsingOption3Value(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ProductVariant
	var foreign ProductOptionValue

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, productOptionValueDBTypes, false, productOptionValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOptionValue struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Option3ValueID, foreign.OptionID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Option3Value().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.OptionID, foreign.OptionID) {
		t.Errorf("want: %v, got %v", foreign.OptionID, check.OptionID)
	}

	slice := ProductVariantSlice{&local}
	if err = local.L.LoadOption3Value(ctx, tx, false, (*[]*ProductVariant)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Option3Value == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Option3Value = nil
	if err = local.L.LoadOption3Value(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Option3Value == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testProductVariantToOneImageUsingImage(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ProductVariant
	var foreign Image

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, imageDBTypes, false, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ImageID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Image().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ProductVariantSlice{&local}
	if err = local.L.LoadImage(ctx, tx, false, (*[]*ProductVariant)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Image == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Image = nil
	if err = local.L.LoadImage(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Image == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testProductVariantToOneImageUsingInventoryItem(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ProductVariant
	var foreign Image

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, imageDBTypes, false, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.InventoryItemID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.InventoryItem().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ProductVariantSlice{&local}
	if err = local.L.LoadInventoryItem(ctx, tx, false, (*[]*ProductVariant)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.InventoryItem == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.InventoryItem = nil
	if err = local.L.LoadInventoryItem(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.InventoryItem == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testProductVariantToOneSetOpProductUsingProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c Product

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Product{&b, &c} {
		err = a.SetProduct(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Product != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProductVariants[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ProductID != x.ID {
			t.Error("foreign key was wrong value", a.ProductID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProductID))
		reflect.Indirect(reflect.ValueOf(&a.ProductID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ProductID != x.ID {
			t.Error("foreign key was wrong value", a.ProductID, x.ID)
		}
	}
}
func testProductVariantToOneSetOpProductOptionValueUsingOption1Value(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c ProductOptionValue

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productOptionValueDBTypes, false, strmangle.SetComplement(productOptionValuePrimaryKeyColumns, productOptionValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productOptionValueDBTypes, false, strmangle.SetComplement(productOptionValuePrimaryKeyColumns, productOptionValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ProductOptionValue{&b, &c} {
		err = a.SetOption1Value(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Option1Value != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Option1ValueProductVariants[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Option1ValueID, x.OptionID) {
			t.Error("foreign key was wrong value", a.Option1ValueID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Option1ValueID))
		reflect.Indirect(reflect.ValueOf(&a.Option1ValueID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Option1ValueID, x.OptionID) {
			t.Error("foreign key was wrong value", a.Option1ValueID, x.OptionID)
		}
	}
}

func testProductVariantToOneRemoveOpProductOptionValueUsingOption1Value(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b ProductOptionValue

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productOptionValueDBTypes, false, strmangle.SetComplement(productOptionValuePrimaryKeyColumns, productOptionValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetOption1Value(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveOption1Value(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Option1Value().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Option1Value != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Option1ValueID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Option1ValueProductVariants) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testProductVariantToOneSetOpProductOptionValueUsingOption2Value(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c ProductOptionValue

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productOptionValueDBTypes, false, strmangle.SetComplement(productOptionValuePrimaryKeyColumns, productOptionValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productOptionValueDBTypes, false, strmangle.SetComplement(productOptionValuePrimaryKeyColumns, productOptionValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ProductOptionValue{&b, &c} {
		err = a.SetOption2Value(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Option2Value != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Option2ValueProductVariants[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Option2ValueID, x.OptionID) {
			t.Error("foreign key was wrong value", a.Option2ValueID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Option2ValueID))
		reflect.Indirect(reflect.ValueOf(&a.Option2ValueID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Option2ValueID, x.OptionID) {
			t.Error("foreign key was wrong value", a.Option2ValueID, x.OptionID)
		}
	}
}

func testProductVariantToOneRemoveOpProductOptionValueUsingOption2Value(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b ProductOptionValue

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productOptionValueDBTypes, false, strmangle.SetComplement(productOptionValuePrimaryKeyColumns, productOptionValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetOption2Value(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveOption2Value(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Option2Value().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Option2Value != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Option2ValueID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Option2ValueProductVariants) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testProductVariantToOneSetOpProductOptionValueUsingOption3Value(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c ProductOptionValue

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productOptionValueDBTypes, false, strmangle.SetComplement(productOptionValuePrimaryKeyColumns, productOptionValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productOptionValueDBTypes, false, strmangle.SetComplement(productOptionValuePrimaryKeyColumns, productOptionValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ProductOptionValue{&b, &c} {
		err = a.SetOption3Value(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Option3Value != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Option3ValueProductVariants[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Option3ValueID, x.OptionID) {
			t.Error("foreign key was wrong value", a.Option3ValueID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Option3ValueID))
		reflect.Indirect(reflect.ValueOf(&a.Option3ValueID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Option3ValueID, x.OptionID) {
			t.Error("foreign key was wrong value", a.Option3ValueID, x.OptionID)
		}
	}
}

func testProductVariantToOneRemoveOpProductOptionValueUsingOption3Value(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b ProductOptionValue

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productOptionValueDBTypes, false, strmangle.SetComplement(productOptionValuePrimaryKeyColumns, productOptionValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetOption3Value(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveOption3Value(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Option3Value().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Option3Value != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Option3ValueID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Option3ValueProductVariants) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testProductVariantToOneSetOpImageUsingImage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c Image

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Image{&b, &c} {
		err = a.SetImage(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Image != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProductVariants[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ImageID, x.ID) {
			t.Error("foreign key was wrong value", a.ImageID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ImageID))
		reflect.Indirect(reflect.ValueOf(&a.ImageID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ImageID, x.ID) {
			t.Error("foreign key was wrong value", a.ImageID, x.ID)
		}
	}
}

func testProductVariantToOneRemoveOpImageUsingImage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b Image

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetImage(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveImage(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Image().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Image != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ImageID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ProductVariants) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testProductVariantToOneSetOpImageUsingInventoryItem(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c Image

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Image{&b, &c} {
		err = a.SetInventoryItem(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.InventoryItem != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.InventoryItemProductVariants[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.InventoryItemID, x.ID) {
			t.Error("foreign key was wrong value", a.InventoryItemID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.InventoryItemID))
		reflect.Indirect(reflect.ValueOf(&a.InventoryItemID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.InventoryItemID, x.ID) {
			t.Error("foreign key was wrong value", a.InventoryItemID, x.ID)
		}
	}
}

func testProductVariantToOneRemoveOpImageUsingInventoryItem(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b Image

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetInventoryItem(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveInventoryItem(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.InventoryItem().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.InventoryItem != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.InventoryItemID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.InventoryItemProductVariants) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testProductVariantsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductVariant{}
	if err = randomize.Struct(seed, o, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProductVariantsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductVariant{}
	if err = randomize.Struct(seed, o, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProductVariantSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProductVariantsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductVariant{}
	if err = randomize.Struct(seed, o, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProductVariants().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	productVariantDBTypes = map[string]string{`ID`: `bigint`, `ProductID`: `bigint`, `InventoryItemID`: `bigint`, `ImageID`: `bigint`, `Barcode`: `varchar`, `CompareAtPrice`: `decimal`, `FulfillmentService`: `varchar`, `Grams`: `double`, `InventoryManagement`: `varchar`, `InventoryPolicy`: `varchar`, `InventoryQuantity`: `int`, `Position`: `smallint`, `Price`: `decimal`, `Sku`: `varchar`, `Taxable`: `tinyint`, `Title`: `varchar`, `Weight`: `double`, `WeightUnit`: `varchar`, `CreatedAt`: `datetime`, `UpdatedAt`: `datetime`, `Option1ValueID`: `bigint`, `Option2ValueID`: `bigint`, `Option3ValueID`: `bigint`}
	_                     = bytes.MinRead
)

func testProductVariantsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(productVariantPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(productVariantAllColumns) == len(productVariantPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProductVariant{}
	if err = randomize.Struct(seed, o, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProductVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, productVariantDBTypes, true, productVariantPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testProductVariantsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(productVariantAllColumns) == len(productVariantPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProductVariant{}
	if err = randomize.Struct(seed, o, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProductVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, productVariantDBTypes, true, productVariantPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(productVariantAllColumns, productVariantPrimaryKeyColumns) {
		fields = productVariantAllColumns
	} else {
		fields = strmangle.SetComplement(
			productVariantAllColumns,
			productVariantPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ProductVariantSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testProductVariantsUpsert(t *testing.T) {
	t.Parallel()

	if len(productVariantAllColumns) == len(productVariantPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLProductVariantUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ProductVariant{}
	if err = randomize.Struct(seed, &o, productVariantDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProductVariant: %s", err)
	}

	count, err := ProductVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, productVariantDBTypes, false, productVariantPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProductVariant: %s", err)
	}

	count, err = ProductVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
