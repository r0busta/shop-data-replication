// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// OrderLine is an object representing the database table.
type OrderLine struct {
	ID            int64         `boil:"id" json:"id" toml:"id" yaml:"id"`
	OrderID       int64         `boil:"order_id" json:"order_id" toml:"order_id" yaml:"order_id"`
	ProductID     null.Int64    `boil:"product_id" json:"product_id,omitempty" toml:"product_id" yaml:"product_id,omitempty"`
	VariantID     null.Int64    `boil:"variant_id" json:"variant_id,omitempty" toml:"variant_id" yaml:"variant_id,omitempty"`
	Sku           null.String   `boil:"sku" json:"sku,omitempty" toml:"sku" yaml:"sku,omitempty"`
	Name          null.String   `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Title         null.String   `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	VariantTitle  null.String   `boil:"variant_title" json:"variant_title,omitempty" toml:"variant_title" yaml:"variant_title,omitempty"`
	Vendor        null.String   `boil:"vendor" json:"vendor,omitempty" toml:"vendor" yaml:"vendor,omitempty"`
	Quantity      int           `boil:"quantity" json:"quantity" toml:"quantity" yaml:"quantity"`
	Price         types.Decimal `boil:"price" json:"price" toml:"price" yaml:"price"`
	TotalDiscount types.Decimal `boil:"total_discount" json:"total_discount" toml:"total_discount" yaml:"total_discount"`

	R *orderLineR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L orderLineL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrderLineColumns = struct {
	ID            string
	OrderID       string
	ProductID     string
	VariantID     string
	Sku           string
	Name          string
	Title         string
	VariantTitle  string
	Vendor        string
	Quantity      string
	Price         string
	TotalDiscount string
}{
	ID:            "id",
	OrderID:       "order_id",
	ProductID:     "product_id",
	VariantID:     "variant_id",
	Sku:           "sku",
	Name:          "name",
	Title:         "title",
	VariantTitle:  "variant_title",
	Vendor:        "vendor",
	Quantity:      "quantity",
	Price:         "price",
	TotalDiscount: "total_discount",
}

var OrderLineTableColumns = struct {
	ID            string
	OrderID       string
	ProductID     string
	VariantID     string
	Sku           string
	Name          string
	Title         string
	VariantTitle  string
	Vendor        string
	Quantity      string
	Price         string
	TotalDiscount string
}{
	ID:            "order_line.id",
	OrderID:       "order_line.order_id",
	ProductID:     "order_line.product_id",
	VariantID:     "order_line.variant_id",
	Sku:           "order_line.sku",
	Name:          "order_line.name",
	Title:         "order_line.title",
	VariantTitle:  "order_line.variant_title",
	Vendor:        "order_line.vendor",
	Quantity:      "order_line.quantity",
	Price:         "order_line.price",
	TotalDiscount: "order_line.total_discount",
}

// Generated where

var OrderLineWhere = struct {
	ID            whereHelperint64
	OrderID       whereHelperint64
	ProductID     whereHelpernull_Int64
	VariantID     whereHelpernull_Int64
	Sku           whereHelpernull_String
	Name          whereHelpernull_String
	Title         whereHelpernull_String
	VariantTitle  whereHelpernull_String
	Vendor        whereHelpernull_String
	Quantity      whereHelperint
	Price         whereHelpertypes_Decimal
	TotalDiscount whereHelpertypes_Decimal
}{
	ID:            whereHelperint64{field: "`order_line`.`id`"},
	OrderID:       whereHelperint64{field: "`order_line`.`order_id`"},
	ProductID:     whereHelpernull_Int64{field: "`order_line`.`product_id`"},
	VariantID:     whereHelpernull_Int64{field: "`order_line`.`variant_id`"},
	Sku:           whereHelpernull_String{field: "`order_line`.`sku`"},
	Name:          whereHelpernull_String{field: "`order_line`.`name`"},
	Title:         whereHelpernull_String{field: "`order_line`.`title`"},
	VariantTitle:  whereHelpernull_String{field: "`order_line`.`variant_title`"},
	Vendor:        whereHelpernull_String{field: "`order_line`.`vendor`"},
	Quantity:      whereHelperint{field: "`order_line`.`quantity`"},
	Price:         whereHelpertypes_Decimal{field: "`order_line`.`price`"},
	TotalDiscount: whereHelpertypes_Decimal{field: "`order_line`.`total_discount`"},
}

// OrderLineRels is where relationship names are stored.
var OrderLineRels = struct {
	Order   string
	Product string
	Variant string
}{
	Order:   "Order",
	Product: "Product",
	Variant: "Variant",
}

// orderLineR is where relationships are stored.
type orderLineR struct {
	Order   *CustomerOrder  `boil:"Order" json:"Order" toml:"Order" yaml:"Order"`
	Product *Product        `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	Variant *ProductVariant `boil:"Variant" json:"Variant" toml:"Variant" yaml:"Variant"`
}

// NewStruct creates a new relationship struct
func (*orderLineR) NewStruct() *orderLineR {
	return &orderLineR{}
}

// orderLineL is where Load methods for each relationship are stored.
type orderLineL struct{}

var (
	orderLineAllColumns            = []string{"id", "order_id", "product_id", "variant_id", "sku", "name", "title", "variant_title", "vendor", "quantity", "price", "total_discount"}
	orderLineColumnsWithoutDefault = []string{"id", "order_id", "product_id", "variant_id", "sku", "name", "title", "variant_title", "vendor", "quantity", "price", "total_discount"}
	orderLineColumnsWithDefault    = []string{}
	orderLinePrimaryKeyColumns     = []string{"id"}
)

type (
	// OrderLineSlice is an alias for a slice of pointers to OrderLine.
	// This should almost always be used instead of []OrderLine.
	OrderLineSlice []*OrderLine
	// OrderLineHook is the signature for custom OrderLine hook methods
	OrderLineHook func(context.Context, boil.ContextExecutor, *OrderLine) error

	orderLineQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	orderLineType                 = reflect.TypeOf(&OrderLine{})
	orderLineMapping              = queries.MakeStructMapping(orderLineType)
	orderLinePrimaryKeyMapping, _ = queries.BindMapping(orderLineType, orderLineMapping, orderLinePrimaryKeyColumns)
	orderLineInsertCacheMut       sync.RWMutex
	orderLineInsertCache          = make(map[string]insertCache)
	orderLineUpdateCacheMut       sync.RWMutex
	orderLineUpdateCache          = make(map[string]updateCache)
	orderLineUpsertCacheMut       sync.RWMutex
	orderLineUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var orderLineBeforeInsertHooks []OrderLineHook
var orderLineBeforeUpdateHooks []OrderLineHook
var orderLineBeforeDeleteHooks []OrderLineHook
var orderLineBeforeUpsertHooks []OrderLineHook

var orderLineAfterInsertHooks []OrderLineHook
var orderLineAfterSelectHooks []OrderLineHook
var orderLineAfterUpdateHooks []OrderLineHook
var orderLineAfterDeleteHooks []OrderLineHook
var orderLineAfterUpsertHooks []OrderLineHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OrderLine) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderLineBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OrderLine) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderLineBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OrderLine) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderLineBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OrderLine) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderLineBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OrderLine) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderLineAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OrderLine) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderLineAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OrderLine) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderLineAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OrderLine) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderLineAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OrderLine) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderLineAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrderLineHook registers your hook function for all future operations.
func AddOrderLineHook(hookPoint boil.HookPoint, orderLineHook OrderLineHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		orderLineBeforeInsertHooks = append(orderLineBeforeInsertHooks, orderLineHook)
	case boil.BeforeUpdateHook:
		orderLineBeforeUpdateHooks = append(orderLineBeforeUpdateHooks, orderLineHook)
	case boil.BeforeDeleteHook:
		orderLineBeforeDeleteHooks = append(orderLineBeforeDeleteHooks, orderLineHook)
	case boil.BeforeUpsertHook:
		orderLineBeforeUpsertHooks = append(orderLineBeforeUpsertHooks, orderLineHook)
	case boil.AfterInsertHook:
		orderLineAfterInsertHooks = append(orderLineAfterInsertHooks, orderLineHook)
	case boil.AfterSelectHook:
		orderLineAfterSelectHooks = append(orderLineAfterSelectHooks, orderLineHook)
	case boil.AfterUpdateHook:
		orderLineAfterUpdateHooks = append(orderLineAfterUpdateHooks, orderLineHook)
	case boil.AfterDeleteHook:
		orderLineAfterDeleteHooks = append(orderLineAfterDeleteHooks, orderLineHook)
	case boil.AfterUpsertHook:
		orderLineAfterUpsertHooks = append(orderLineAfterUpsertHooks, orderLineHook)
	}
}

// One returns a single orderLine record from the query.
func (q orderLineQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrderLine, error) {
	o := &OrderLine{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for order_line")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OrderLine records from the query.
func (q orderLineQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrderLineSlice, error) {
	var o []*OrderLine

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OrderLine slice")
	}

	if len(orderLineAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OrderLine records in the query.
func (q orderLineQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count order_line rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q orderLineQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if order_line exists")
	}

	return count > 0, nil
}

// Order pointed to by the foreign key.
func (o *OrderLine) Order(mods ...qm.QueryMod) customerOrderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.OrderID),
	}

	queryMods = append(queryMods, mods...)

	query := CustomerOrders(queryMods...)
	queries.SetFrom(query.Query, "`customer_order`")

	return query
}

// Product pointed to by the foreign key.
func (o *OrderLine) Product(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ProductID),
	}

	queryMods = append(queryMods, mods...)

	query := Products(queryMods...)
	queries.SetFrom(query.Query, "`product`")

	return query
}

// Variant pointed to by the foreign key.
func (o *OrderLine) Variant(mods ...qm.QueryMod) productVariantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.VariantID),
	}

	queryMods = append(queryMods, mods...)

	query := ProductVariants(queryMods...)
	queries.SetFrom(query.Query, "`product_variant`")

	return query
}

// LoadOrder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderLineL) LoadOrder(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrderLine interface{}, mods queries.Applicator) error {
	var slice []*OrderLine
	var object *OrderLine

	if singular {
		object = maybeOrderLine.(*OrderLine)
	} else {
		slice = *maybeOrderLine.(*[]*OrderLine)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderLineR{}
		}
		args = append(args, object.OrderID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderLineR{}
			}

			for _, a := range args {
				if a == obj.OrderID {
					continue Outer
				}
			}

			args = append(args, obj.OrderID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`customer_order`),
		qm.WhereIn(`customer_order.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CustomerOrder")
	}

	var resultSlice []*CustomerOrder
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CustomerOrder")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for customer_order")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for customer_order")
	}

	if len(orderLineAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Order = foreign
		if foreign.R == nil {
			foreign.R = &customerOrderR{}
		}
		foreign.R.OrderOrderLines = append(foreign.R.OrderOrderLines, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrderID == foreign.ID {
				local.R.Order = foreign
				if foreign.R == nil {
					foreign.R = &customerOrderR{}
				}
				foreign.R.OrderOrderLines = append(foreign.R.OrderOrderLines, local)
				break
			}
		}
	}

	return nil
}

// LoadProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderLineL) LoadProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrderLine interface{}, mods queries.Applicator) error {
	var slice []*OrderLine
	var object *OrderLine

	if singular {
		object = maybeOrderLine.(*OrderLine)
	} else {
		slice = *maybeOrderLine.(*[]*OrderLine)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderLineR{}
		}
		if !queries.IsNil(object.ProductID) {
			args = append(args, object.ProductID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderLineR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProductID) {
				args = append(args, obj.ProductID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product`),
		qm.WhereIn(`product.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for product")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product")
	}

	if len(orderLineAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Product = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.OrderLines = append(foreign.R.OrderLines, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProductID, foreign.ID) {
				local.R.Product = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.OrderLines = append(foreign.R.OrderLines, local)
				break
			}
		}
	}

	return nil
}

// LoadVariant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderLineL) LoadVariant(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrderLine interface{}, mods queries.Applicator) error {
	var slice []*OrderLine
	var object *OrderLine

	if singular {
		object = maybeOrderLine.(*OrderLine)
	} else {
		slice = *maybeOrderLine.(*[]*OrderLine)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderLineR{}
		}
		if !queries.IsNil(object.VariantID) {
			args = append(args, object.VariantID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderLineR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.VariantID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.VariantID) {
				args = append(args, obj.VariantID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_variant`),
		qm.WhereIn(`product_variant.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProductVariant")
	}

	var resultSlice []*ProductVariant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProductVariant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for product_variant")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_variant")
	}

	if len(orderLineAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Variant = foreign
		if foreign.R == nil {
			foreign.R = &productVariantR{}
		}
		foreign.R.VariantOrderLines = append(foreign.R.VariantOrderLines, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.VariantID, foreign.ID) {
				local.R.Variant = foreign
				if foreign.R == nil {
					foreign.R = &productVariantR{}
				}
				foreign.R.VariantOrderLines = append(foreign.R.VariantOrderLines, local)
				break
			}
		}
	}

	return nil
}

// SetOrder of the orderLine to the related item.
// Sets o.R.Order to related.
// Adds o to related.R.OrderOrderLines.
func (o *OrderLine) SetOrder(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CustomerOrder) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `order_line` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"order_id"}),
		strmangle.WhereClause("`", "`", 0, orderLinePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrderID = related.ID
	if o.R == nil {
		o.R = &orderLineR{
			Order: related,
		}
	} else {
		o.R.Order = related
	}

	if related.R == nil {
		related.R = &customerOrderR{
			OrderOrderLines: OrderLineSlice{o},
		}
	} else {
		related.R.OrderOrderLines = append(related.R.OrderOrderLines, o)
	}

	return nil
}

// SetProduct of the orderLine to the related item.
// Sets o.R.Product to related.
// Adds o to related.R.OrderLines.
func (o *OrderLine) SetProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `order_line` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"product_id"}),
		strmangle.WhereClause("`", "`", 0, orderLinePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProductID, related.ID)
	if o.R == nil {
		o.R = &orderLineR{
			Product: related,
		}
	} else {
		o.R.Product = related
	}

	if related.R == nil {
		related.R = &productR{
			OrderLines: OrderLineSlice{o},
		}
	} else {
		related.R.OrderLines = append(related.R.OrderLines, o)
	}

	return nil
}

// RemoveProduct relationship.
// Sets o.R.Product to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *OrderLine) RemoveProduct(ctx context.Context, exec boil.ContextExecutor, related *Product) error {
	var err error

	queries.SetScanner(&o.ProductID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("product_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Product = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.OrderLines {
		if queries.Equal(o.ProductID, ri.ProductID) {
			continue
		}

		ln := len(related.R.OrderLines)
		if ln > 1 && i < ln-1 {
			related.R.OrderLines[i] = related.R.OrderLines[ln-1]
		}
		related.R.OrderLines = related.R.OrderLines[:ln-1]
		break
	}
	return nil
}

// SetVariant of the orderLine to the related item.
// Sets o.R.Variant to related.
// Adds o to related.R.VariantOrderLines.
func (o *OrderLine) SetVariant(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ProductVariant) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `order_line` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"variant_id"}),
		strmangle.WhereClause("`", "`", 0, orderLinePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.VariantID, related.ID)
	if o.R == nil {
		o.R = &orderLineR{
			Variant: related,
		}
	} else {
		o.R.Variant = related
	}

	if related.R == nil {
		related.R = &productVariantR{
			VariantOrderLines: OrderLineSlice{o},
		}
	} else {
		related.R.VariantOrderLines = append(related.R.VariantOrderLines, o)
	}

	return nil
}

// RemoveVariant relationship.
// Sets o.R.Variant to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *OrderLine) RemoveVariant(ctx context.Context, exec boil.ContextExecutor, related *ProductVariant) error {
	var err error

	queries.SetScanner(&o.VariantID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("variant_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Variant = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.VariantOrderLines {
		if queries.Equal(o.VariantID, ri.VariantID) {
			continue
		}

		ln := len(related.R.VariantOrderLines)
		if ln > 1 && i < ln-1 {
			related.R.VariantOrderLines[i] = related.R.VariantOrderLines[ln-1]
		}
		related.R.VariantOrderLines = related.R.VariantOrderLines[:ln-1]
		break
	}
	return nil
}

// OrderLines retrieves all the records using an executor.
func OrderLines(mods ...qm.QueryMod) orderLineQuery {
	mods = append(mods, qm.From("`order_line`"))
	return orderLineQuery{NewQuery(mods...)}
}

// FindOrderLine retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrderLine(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*OrderLine, error) {
	orderLineObj := &OrderLine{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `order_line` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, orderLineObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from order_line")
	}

	if err = orderLineObj.doAfterSelectHooks(ctx, exec); err != nil {
		return orderLineObj, err
	}

	return orderLineObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrderLine) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no order_line provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderLineColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	orderLineInsertCacheMut.RLock()
	cache, cached := orderLineInsertCache[key]
	orderLineInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			orderLineAllColumns,
			orderLineColumnsWithDefault,
			orderLineColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(orderLineType, orderLineMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(orderLineType, orderLineMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `order_line` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `order_line` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `order_line` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, orderLinePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into order_line")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for order_line")
	}

CacheNoHooks:
	if !cached {
		orderLineInsertCacheMut.Lock()
		orderLineInsertCache[key] = cache
		orderLineInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OrderLine.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrderLine) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	orderLineUpdateCacheMut.RLock()
	cache, cached := orderLineUpdateCache[key]
	orderLineUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			orderLineAllColumns,
			orderLinePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update order_line, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `order_line` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, orderLinePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(orderLineType, orderLineMapping, append(wl, orderLinePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update order_line row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for order_line")
	}

	if !cached {
		orderLineUpdateCacheMut.Lock()
		orderLineUpdateCache[key] = cache
		orderLineUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q orderLineQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for order_line")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for order_line")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrderLineSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderLinePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `order_line` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, orderLinePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in orderLine slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all orderLine")
	}
	return rowsAff, nil
}

var mySQLOrderLineUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OrderLine) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no order_line provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderLineColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLOrderLineUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	orderLineUpsertCacheMut.RLock()
	cache, cached := orderLineUpsertCache[key]
	orderLineUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			orderLineAllColumns,
			orderLineColumnsWithDefault,
			orderLineColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			orderLineAllColumns,
			orderLinePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert order_line, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`order_line`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `order_line` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(orderLineType, orderLineMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(orderLineType, orderLineMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for order_line")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(orderLineType, orderLineMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for order_line")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for order_line")
	}

CacheNoHooks:
	if !cached {
		orderLineUpsertCacheMut.Lock()
		orderLineUpsertCache[key] = cache
		orderLineUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OrderLine record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrderLine) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OrderLine provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), orderLinePrimaryKeyMapping)
	sql := "DELETE FROM `order_line` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from order_line")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for order_line")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q orderLineQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no orderLineQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from order_line")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for order_line")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrderLineSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(orderLineBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderLinePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `order_line` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, orderLinePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from orderLine slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for order_line")
	}

	if len(orderLineAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrderLine) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrderLine(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderLineSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrderLineSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderLinePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `order_line`.* FROM `order_line` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, orderLinePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OrderLineSlice")
	}

	*o = slice

	return nil
}

// OrderLineExists checks if the OrderLine row exists.
func OrderLineExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `order_line` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if order_line exists")
	}

	return exists, nil
}
