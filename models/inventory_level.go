// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// InventoryLevel is an object representing the database table.
type InventoryLevel struct {
	InventoryItemID int64     `boil:"inventory_item_id" json:"inventory_item_id" toml:"inventory_item_id" yaml:"inventory_item_id"`
	LocationID      int64     `boil:"location_id" json:"location_id" toml:"location_id" yaml:"location_id"`
	Available       null.Int  `boil:"available" json:"available,omitempty" toml:"available" yaml:"available,omitempty"`
	UpdatedAt       null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *inventoryLevelR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L inventoryLevelL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InventoryLevelColumns = struct {
	InventoryItemID string
	LocationID      string
	Available       string
	UpdatedAt       string
}{
	InventoryItemID: "inventory_item_id",
	LocationID:      "location_id",
	Available:       "available",
	UpdatedAt:       "updated_at",
}

// Generated where

var InventoryLevelWhere = struct {
	InventoryItemID whereHelperint64
	LocationID      whereHelperint64
	Available       whereHelpernull_Int
	UpdatedAt       whereHelpernull_Time
}{
	InventoryItemID: whereHelperint64{field: "`inventory_level`.`inventory_item_id`"},
	LocationID:      whereHelperint64{field: "`inventory_level`.`location_id`"},
	Available:       whereHelpernull_Int{field: "`inventory_level`.`available`"},
	UpdatedAt:       whereHelpernull_Time{field: "`inventory_level`.`updated_at`"},
}

// InventoryLevelRels is where relationship names are stored.
var InventoryLevelRels = struct {
	InventoryItem string
	Location      string
}{
	InventoryItem: "InventoryItem",
	Location:      "Location",
}

// inventoryLevelR is where relationships are stored.
type inventoryLevelR struct {
	InventoryItem *InventoryItem `boil:"InventoryItem" json:"InventoryItem" toml:"InventoryItem" yaml:"InventoryItem"`
	Location      *Location      `boil:"Location" json:"Location" toml:"Location" yaml:"Location"`
}

// NewStruct creates a new relationship struct
func (*inventoryLevelR) NewStruct() *inventoryLevelR {
	return &inventoryLevelR{}
}

// inventoryLevelL is where Load methods for each relationship are stored.
type inventoryLevelL struct{}

var (
	inventoryLevelAllColumns            = []string{"inventory_item_id", "location_id", "available", "updated_at"}
	inventoryLevelColumnsWithoutDefault = []string{"inventory_item_id", "location_id", "available", "updated_at"}
	inventoryLevelColumnsWithDefault    = []string{}
	inventoryLevelPrimaryKeyColumns     = []string{"inventory_item_id", "location_id"}
)

type (
	// InventoryLevelSlice is an alias for a slice of pointers to InventoryLevel.
	// This should generally be used opposed to []InventoryLevel.
	InventoryLevelSlice []*InventoryLevel
	// InventoryLevelHook is the signature for custom InventoryLevel hook methods
	InventoryLevelHook func(context.Context, boil.ContextExecutor, *InventoryLevel) error

	inventoryLevelQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	inventoryLevelType                 = reflect.TypeOf(&InventoryLevel{})
	inventoryLevelMapping              = queries.MakeStructMapping(inventoryLevelType)
	inventoryLevelPrimaryKeyMapping, _ = queries.BindMapping(inventoryLevelType, inventoryLevelMapping, inventoryLevelPrimaryKeyColumns)
	inventoryLevelInsertCacheMut       sync.RWMutex
	inventoryLevelInsertCache          = make(map[string]insertCache)
	inventoryLevelUpdateCacheMut       sync.RWMutex
	inventoryLevelUpdateCache          = make(map[string]updateCache)
	inventoryLevelUpsertCacheMut       sync.RWMutex
	inventoryLevelUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var inventoryLevelBeforeInsertHooks []InventoryLevelHook
var inventoryLevelBeforeUpdateHooks []InventoryLevelHook
var inventoryLevelBeforeDeleteHooks []InventoryLevelHook
var inventoryLevelBeforeUpsertHooks []InventoryLevelHook

var inventoryLevelAfterInsertHooks []InventoryLevelHook
var inventoryLevelAfterSelectHooks []InventoryLevelHook
var inventoryLevelAfterUpdateHooks []InventoryLevelHook
var inventoryLevelAfterDeleteHooks []InventoryLevelHook
var inventoryLevelAfterUpsertHooks []InventoryLevelHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *InventoryLevel) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inventoryLevelBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *InventoryLevel) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inventoryLevelBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *InventoryLevel) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inventoryLevelBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *InventoryLevel) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inventoryLevelBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *InventoryLevel) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inventoryLevelAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *InventoryLevel) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inventoryLevelAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *InventoryLevel) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inventoryLevelAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *InventoryLevel) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inventoryLevelAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *InventoryLevel) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inventoryLevelAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInventoryLevelHook registers your hook function for all future operations.
func AddInventoryLevelHook(hookPoint boil.HookPoint, inventoryLevelHook InventoryLevelHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		inventoryLevelBeforeInsertHooks = append(inventoryLevelBeforeInsertHooks, inventoryLevelHook)
	case boil.BeforeUpdateHook:
		inventoryLevelBeforeUpdateHooks = append(inventoryLevelBeforeUpdateHooks, inventoryLevelHook)
	case boil.BeforeDeleteHook:
		inventoryLevelBeforeDeleteHooks = append(inventoryLevelBeforeDeleteHooks, inventoryLevelHook)
	case boil.BeforeUpsertHook:
		inventoryLevelBeforeUpsertHooks = append(inventoryLevelBeforeUpsertHooks, inventoryLevelHook)
	case boil.AfterInsertHook:
		inventoryLevelAfterInsertHooks = append(inventoryLevelAfterInsertHooks, inventoryLevelHook)
	case boil.AfterSelectHook:
		inventoryLevelAfterSelectHooks = append(inventoryLevelAfterSelectHooks, inventoryLevelHook)
	case boil.AfterUpdateHook:
		inventoryLevelAfterUpdateHooks = append(inventoryLevelAfterUpdateHooks, inventoryLevelHook)
	case boil.AfterDeleteHook:
		inventoryLevelAfterDeleteHooks = append(inventoryLevelAfterDeleteHooks, inventoryLevelHook)
	case boil.AfterUpsertHook:
		inventoryLevelAfterUpsertHooks = append(inventoryLevelAfterUpsertHooks, inventoryLevelHook)
	}
}

// One returns a single inventoryLevel record from the query.
func (q inventoryLevelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*InventoryLevel, error) {
	o := &InventoryLevel{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for inventory_level")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all InventoryLevel records from the query.
func (q inventoryLevelQuery) All(ctx context.Context, exec boil.ContextExecutor) (InventoryLevelSlice, error) {
	var o []*InventoryLevel

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to InventoryLevel slice")
	}

	if len(inventoryLevelAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all InventoryLevel records in the query.
func (q inventoryLevelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count inventory_level rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q inventoryLevelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if inventory_level exists")
	}

	return count > 0, nil
}

// InventoryItem pointed to by the foreign key.
func (o *InventoryLevel) InventoryItem(mods ...qm.QueryMod) inventoryItemQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.InventoryItemID),
	}

	queryMods = append(queryMods, mods...)

	query := InventoryItems(queryMods...)
	queries.SetFrom(query.Query, "`inventory_item`")

	return query
}

// Location pointed to by the foreign key.
func (o *InventoryLevel) Location(mods ...qm.QueryMod) locationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.LocationID),
	}

	queryMods = append(queryMods, mods...)

	query := Locations(queryMods...)
	queries.SetFrom(query.Query, "`location`")

	return query
}

// LoadInventoryItem allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (inventoryLevelL) LoadInventoryItem(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInventoryLevel interface{}, mods queries.Applicator) error {
	var slice []*InventoryLevel
	var object *InventoryLevel

	if singular {
		object = maybeInventoryLevel.(*InventoryLevel)
	} else {
		slice = *maybeInventoryLevel.(*[]*InventoryLevel)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &inventoryLevelR{}
		}
		args = append(args, object.InventoryItemID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &inventoryLevelR{}
			}

			for _, a := range args {
				if a == obj.InventoryItemID {
					continue Outer
				}
			}

			args = append(args, obj.InventoryItemID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`inventory_item`),
		qm.WhereIn(`inventory_item.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load InventoryItem")
	}

	var resultSlice []*InventoryItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice InventoryItem")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for inventory_item")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for inventory_item")
	}

	if len(inventoryLevelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.InventoryItem = foreign
		if foreign.R == nil {
			foreign.R = &inventoryItemR{}
		}
		foreign.R.InventoryLevels = append(foreign.R.InventoryLevels, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.InventoryItemID == foreign.ID {
				local.R.InventoryItem = foreign
				if foreign.R == nil {
					foreign.R = &inventoryItemR{}
				}
				foreign.R.InventoryLevels = append(foreign.R.InventoryLevels, local)
				break
			}
		}
	}

	return nil
}

// LoadLocation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (inventoryLevelL) LoadLocation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInventoryLevel interface{}, mods queries.Applicator) error {
	var slice []*InventoryLevel
	var object *InventoryLevel

	if singular {
		object = maybeInventoryLevel.(*InventoryLevel)
	} else {
		slice = *maybeInventoryLevel.(*[]*InventoryLevel)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &inventoryLevelR{}
		}
		args = append(args, object.LocationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &inventoryLevelR{}
			}

			for _, a := range args {
				if a == obj.LocationID {
					continue Outer
				}
			}

			args = append(args, obj.LocationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`location`),
		qm.WhereIn(`location.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Location")
	}

	var resultSlice []*Location
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Location")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for location")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for location")
	}

	if len(inventoryLevelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Location = foreign
		if foreign.R == nil {
			foreign.R = &locationR{}
		}
		foreign.R.InventoryLevels = append(foreign.R.InventoryLevels, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LocationID == foreign.ID {
				local.R.Location = foreign
				if foreign.R == nil {
					foreign.R = &locationR{}
				}
				foreign.R.InventoryLevels = append(foreign.R.InventoryLevels, local)
				break
			}
		}
	}

	return nil
}

// SetInventoryItem of the inventoryLevel to the related item.
// Sets o.R.InventoryItem to related.
// Adds o to related.R.InventoryLevels.
func (o *InventoryLevel) SetInventoryItem(ctx context.Context, exec boil.ContextExecutor, insert bool, related *InventoryItem) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `inventory_level` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"inventory_item_id"}),
		strmangle.WhereClause("`", "`", 0, inventoryLevelPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.InventoryItemID, o.LocationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.InventoryItemID = related.ID
	if o.R == nil {
		o.R = &inventoryLevelR{
			InventoryItem: related,
		}
	} else {
		o.R.InventoryItem = related
	}

	if related.R == nil {
		related.R = &inventoryItemR{
			InventoryLevels: InventoryLevelSlice{o},
		}
	} else {
		related.R.InventoryLevels = append(related.R.InventoryLevels, o)
	}

	return nil
}

// SetLocation of the inventoryLevel to the related item.
// Sets o.R.Location to related.
// Adds o to related.R.InventoryLevels.
func (o *InventoryLevel) SetLocation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Location) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `inventory_level` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"location_id"}),
		strmangle.WhereClause("`", "`", 0, inventoryLevelPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.InventoryItemID, o.LocationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LocationID = related.ID
	if o.R == nil {
		o.R = &inventoryLevelR{
			Location: related,
		}
	} else {
		o.R.Location = related
	}

	if related.R == nil {
		related.R = &locationR{
			InventoryLevels: InventoryLevelSlice{o},
		}
	} else {
		related.R.InventoryLevels = append(related.R.InventoryLevels, o)
	}

	return nil
}

// InventoryLevels retrieves all the records using an executor.
func InventoryLevels(mods ...qm.QueryMod) inventoryLevelQuery {
	mods = append(mods, qm.From("`inventory_level`"))
	return inventoryLevelQuery{NewQuery(mods...)}
}

// FindInventoryLevel retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInventoryLevel(ctx context.Context, exec boil.ContextExecutor, inventoryItemID int64, locationID int64, selectCols ...string) (*InventoryLevel, error) {
	inventoryLevelObj := &InventoryLevel{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `inventory_level` where `inventory_item_id`=? AND `location_id`=?", sel,
	)

	q := queries.Raw(query, inventoryItemID, locationID)

	err := q.Bind(ctx, exec, inventoryLevelObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from inventory_level")
	}

	return inventoryLevelObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *InventoryLevel) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no inventory_level provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(inventoryLevelColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	inventoryLevelInsertCacheMut.RLock()
	cache, cached := inventoryLevelInsertCache[key]
	inventoryLevelInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			inventoryLevelAllColumns,
			inventoryLevelColumnsWithDefault,
			inventoryLevelColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(inventoryLevelType, inventoryLevelMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(inventoryLevelType, inventoryLevelMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `inventory_level` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `inventory_level` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `inventory_level` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, inventoryLevelPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into inventory_level")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.InventoryItemID,
		o.LocationID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for inventory_level")
	}

CacheNoHooks:
	if !cached {
		inventoryLevelInsertCacheMut.Lock()
		inventoryLevelInsertCache[key] = cache
		inventoryLevelInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the InventoryLevel.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *InventoryLevel) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	inventoryLevelUpdateCacheMut.RLock()
	cache, cached := inventoryLevelUpdateCache[key]
	inventoryLevelUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			inventoryLevelAllColumns,
			inventoryLevelPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update inventory_level, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `inventory_level` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, inventoryLevelPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(inventoryLevelType, inventoryLevelMapping, append(wl, inventoryLevelPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update inventory_level row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for inventory_level")
	}

	if !cached {
		inventoryLevelUpdateCacheMut.Lock()
		inventoryLevelUpdateCache[key] = cache
		inventoryLevelUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q inventoryLevelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for inventory_level")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for inventory_level")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InventoryLevelSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), inventoryLevelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `inventory_level` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, inventoryLevelPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in inventoryLevel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all inventoryLevel")
	}
	return rowsAff, nil
}

var mySQLInventoryLevelUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *InventoryLevel) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no inventory_level provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(inventoryLevelColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLInventoryLevelUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	inventoryLevelUpsertCacheMut.RLock()
	cache, cached := inventoryLevelUpsertCache[key]
	inventoryLevelUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			inventoryLevelAllColumns,
			inventoryLevelColumnsWithDefault,
			inventoryLevelColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			inventoryLevelAllColumns,
			inventoryLevelPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert inventory_level, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`inventory_level`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `inventory_level` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(inventoryLevelType, inventoryLevelMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(inventoryLevelType, inventoryLevelMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for inventory_level")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(inventoryLevelType, inventoryLevelMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for inventory_level")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for inventory_level")
	}

CacheNoHooks:
	if !cached {
		inventoryLevelUpsertCacheMut.Lock()
		inventoryLevelUpsertCache[key] = cache
		inventoryLevelUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single InventoryLevel record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *InventoryLevel) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no InventoryLevel provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), inventoryLevelPrimaryKeyMapping)
	sql := "DELETE FROM `inventory_level` WHERE `inventory_item_id`=? AND `location_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from inventory_level")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for inventory_level")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q inventoryLevelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no inventoryLevelQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from inventory_level")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for inventory_level")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InventoryLevelSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(inventoryLevelBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), inventoryLevelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `inventory_level` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, inventoryLevelPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from inventoryLevel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for inventory_level")
	}

	if len(inventoryLevelAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *InventoryLevel) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindInventoryLevel(ctx, exec, o.InventoryItemID, o.LocationID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InventoryLevelSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := InventoryLevelSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), inventoryLevelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `inventory_level`.* FROM `inventory_level` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, inventoryLevelPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in InventoryLevelSlice")
	}

	*o = slice

	return nil
}

// InventoryLevelExists checks if the InventoryLevel row exists.
func InventoryLevelExists(ctx context.Context, exec boil.ContextExecutor, inventoryItemID int64, locationID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `inventory_level` where `inventory_item_id`=? AND `location_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, inventoryItemID, locationID)
	}
	row := exec.QueryRowContext(ctx, sql, inventoryItemID, locationID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if inventory_level exists")
	}

	return exists, nil
}
