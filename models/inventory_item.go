// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// InventoryItem is an object representing the database table.
type InventoryItem struct {
	ID                   int64             `boil:"id" json:"id" toml:"id" yaml:"id"`
	Cost                 types.NullDecimal `boil:"cost" json:"cost,omitempty" toml:"cost" yaml:"cost,omitempty"`
	CountryCodeOfOrigin  null.String       `boil:"country_code_of_origin" json:"country_code_of_origin,omitempty" toml:"country_code_of_origin" yaml:"country_code_of_origin,omitempty"`
	CreatedAt            null.Time         `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	ProvinceCodeOfOrigin null.String       `boil:"province_code_of_origin" json:"province_code_of_origin,omitempty" toml:"province_code_of_origin" yaml:"province_code_of_origin,omitempty"`
	RequiresShipping     null.Bool         `boil:"requires_shipping" json:"requires_shipping,omitempty" toml:"requires_shipping" yaml:"requires_shipping,omitempty"`
	Sku                  null.String       `boil:"sku" json:"sku,omitempty" toml:"sku" yaml:"sku,omitempty"`
	Tracked              null.Bool         `boil:"tracked" json:"tracked,omitempty" toml:"tracked" yaml:"tracked,omitempty"`
	UpdatedAt            null.Time         `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *inventoryItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L inventoryItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InventoryItemColumns = struct {
	ID                   string
	Cost                 string
	CountryCodeOfOrigin  string
	CreatedAt            string
	ProvinceCodeOfOrigin string
	RequiresShipping     string
	Sku                  string
	Tracked              string
	UpdatedAt            string
}{
	ID:                   "id",
	Cost:                 "cost",
	CountryCodeOfOrigin:  "country_code_of_origin",
	CreatedAt:            "created_at",
	ProvinceCodeOfOrigin: "province_code_of_origin",
	RequiresShipping:     "requires_shipping",
	Sku:                  "sku",
	Tracked:              "tracked",
	UpdatedAt:            "updated_at",
}

// Generated where

type whereHelpertypes_NullDecimal struct{ field string }

func (w whereHelpertypes_NullDecimal) EQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_NullDecimal) NEQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_NullDecimal) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_NullDecimal) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}
func (w whereHelpertypes_NullDecimal) LT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_NullDecimal) LTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_NullDecimal) GT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_NullDecimal) GTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var InventoryItemWhere = struct {
	ID                   whereHelperint64
	Cost                 whereHelpertypes_NullDecimal
	CountryCodeOfOrigin  whereHelpernull_String
	CreatedAt            whereHelpernull_Time
	ProvinceCodeOfOrigin whereHelpernull_String
	RequiresShipping     whereHelpernull_Bool
	Sku                  whereHelpernull_String
	Tracked              whereHelpernull_Bool
	UpdatedAt            whereHelpernull_Time
}{
	ID:                   whereHelperint64{field: "`inventory_item`.`id`"},
	Cost:                 whereHelpertypes_NullDecimal{field: "`inventory_item`.`cost`"},
	CountryCodeOfOrigin:  whereHelpernull_String{field: "`inventory_item`.`country_code_of_origin`"},
	CreatedAt:            whereHelpernull_Time{field: "`inventory_item`.`created_at`"},
	ProvinceCodeOfOrigin: whereHelpernull_String{field: "`inventory_item`.`province_code_of_origin`"},
	RequiresShipping:     whereHelpernull_Bool{field: "`inventory_item`.`requires_shipping`"},
	Sku:                  whereHelpernull_String{field: "`inventory_item`.`sku`"},
	Tracked:              whereHelpernull_Bool{field: "`inventory_item`.`tracked`"},
	UpdatedAt:            whereHelpernull_Time{field: "`inventory_item`.`updated_at`"},
}

// InventoryItemRels is where relationship names are stored.
var InventoryItemRels = struct {
	InventoryLevels string
}{
	InventoryLevels: "InventoryLevels",
}

// inventoryItemR is where relationships are stored.
type inventoryItemR struct {
	InventoryLevels InventoryLevelSlice `boil:"InventoryLevels" json:"InventoryLevels" toml:"InventoryLevels" yaml:"InventoryLevels"`
}

// NewStruct creates a new relationship struct
func (*inventoryItemR) NewStruct() *inventoryItemR {
	return &inventoryItemR{}
}

// inventoryItemL is where Load methods for each relationship are stored.
type inventoryItemL struct{}

var (
	inventoryItemAllColumns            = []string{"id", "cost", "country_code_of_origin", "created_at", "province_code_of_origin", "requires_shipping", "sku", "tracked", "updated_at"}
	inventoryItemColumnsWithoutDefault = []string{"id", "cost", "country_code_of_origin", "created_at", "province_code_of_origin", "requires_shipping", "sku", "tracked", "updated_at"}
	inventoryItemColumnsWithDefault    = []string{}
	inventoryItemPrimaryKeyColumns     = []string{"id"}
)

type (
	// InventoryItemSlice is an alias for a slice of pointers to InventoryItem.
	// This should generally be used opposed to []InventoryItem.
	InventoryItemSlice []*InventoryItem
	// InventoryItemHook is the signature for custom InventoryItem hook methods
	InventoryItemHook func(context.Context, boil.ContextExecutor, *InventoryItem) error

	inventoryItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	inventoryItemType                 = reflect.TypeOf(&InventoryItem{})
	inventoryItemMapping              = queries.MakeStructMapping(inventoryItemType)
	inventoryItemPrimaryKeyMapping, _ = queries.BindMapping(inventoryItemType, inventoryItemMapping, inventoryItemPrimaryKeyColumns)
	inventoryItemInsertCacheMut       sync.RWMutex
	inventoryItemInsertCache          = make(map[string]insertCache)
	inventoryItemUpdateCacheMut       sync.RWMutex
	inventoryItemUpdateCache          = make(map[string]updateCache)
	inventoryItemUpsertCacheMut       sync.RWMutex
	inventoryItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var inventoryItemBeforeInsertHooks []InventoryItemHook
var inventoryItemBeforeUpdateHooks []InventoryItemHook
var inventoryItemBeforeDeleteHooks []InventoryItemHook
var inventoryItemBeforeUpsertHooks []InventoryItemHook

var inventoryItemAfterInsertHooks []InventoryItemHook
var inventoryItemAfterSelectHooks []InventoryItemHook
var inventoryItemAfterUpdateHooks []InventoryItemHook
var inventoryItemAfterDeleteHooks []InventoryItemHook
var inventoryItemAfterUpsertHooks []InventoryItemHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *InventoryItem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inventoryItemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *InventoryItem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inventoryItemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *InventoryItem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inventoryItemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *InventoryItem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inventoryItemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *InventoryItem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inventoryItemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *InventoryItem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inventoryItemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *InventoryItem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inventoryItemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *InventoryItem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inventoryItemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *InventoryItem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inventoryItemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInventoryItemHook registers your hook function for all future operations.
func AddInventoryItemHook(hookPoint boil.HookPoint, inventoryItemHook InventoryItemHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		inventoryItemBeforeInsertHooks = append(inventoryItemBeforeInsertHooks, inventoryItemHook)
	case boil.BeforeUpdateHook:
		inventoryItemBeforeUpdateHooks = append(inventoryItemBeforeUpdateHooks, inventoryItemHook)
	case boil.BeforeDeleteHook:
		inventoryItemBeforeDeleteHooks = append(inventoryItemBeforeDeleteHooks, inventoryItemHook)
	case boil.BeforeUpsertHook:
		inventoryItemBeforeUpsertHooks = append(inventoryItemBeforeUpsertHooks, inventoryItemHook)
	case boil.AfterInsertHook:
		inventoryItemAfterInsertHooks = append(inventoryItemAfterInsertHooks, inventoryItemHook)
	case boil.AfterSelectHook:
		inventoryItemAfterSelectHooks = append(inventoryItemAfterSelectHooks, inventoryItemHook)
	case boil.AfterUpdateHook:
		inventoryItemAfterUpdateHooks = append(inventoryItemAfterUpdateHooks, inventoryItemHook)
	case boil.AfterDeleteHook:
		inventoryItemAfterDeleteHooks = append(inventoryItemAfterDeleteHooks, inventoryItemHook)
	case boil.AfterUpsertHook:
		inventoryItemAfterUpsertHooks = append(inventoryItemAfterUpsertHooks, inventoryItemHook)
	}
}

// One returns a single inventoryItem record from the query.
func (q inventoryItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*InventoryItem, error) {
	o := &InventoryItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for inventory_item")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all InventoryItem records from the query.
func (q inventoryItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (InventoryItemSlice, error) {
	var o []*InventoryItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to InventoryItem slice")
	}

	if len(inventoryItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all InventoryItem records in the query.
func (q inventoryItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count inventory_item rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q inventoryItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if inventory_item exists")
	}

	return count > 0, nil
}

// InventoryLevels retrieves all the inventory_level's InventoryLevels with an executor.
func (o *InventoryItem) InventoryLevels(mods ...qm.QueryMod) inventoryLevelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`inventory_level`.`inventory_item_id`=?", o.ID),
	)

	query := InventoryLevels(queryMods...)
	queries.SetFrom(query.Query, "`inventory_level`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`inventory_level`.*"})
	}

	return query
}

// LoadInventoryLevels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (inventoryItemL) LoadInventoryLevels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInventoryItem interface{}, mods queries.Applicator) error {
	var slice []*InventoryItem
	var object *InventoryItem

	if singular {
		object = maybeInventoryItem.(*InventoryItem)
	} else {
		slice = *maybeInventoryItem.(*[]*InventoryItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &inventoryItemR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &inventoryItemR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`inventory_level`),
		qm.WhereIn(`inventory_level.inventory_item_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load inventory_level")
	}

	var resultSlice []*InventoryLevel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice inventory_level")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on inventory_level")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for inventory_level")
	}

	if len(inventoryLevelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.InventoryLevels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &inventoryLevelR{}
			}
			foreign.R.InventoryItem = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.InventoryItemID {
				local.R.InventoryLevels = append(local.R.InventoryLevels, foreign)
				if foreign.R == nil {
					foreign.R = &inventoryLevelR{}
				}
				foreign.R.InventoryItem = local
				break
			}
		}
	}

	return nil
}

// AddInventoryLevels adds the given related objects to the existing relationships
// of the inventory_item, optionally inserting them as new records.
// Appends related to o.R.InventoryLevels.
// Sets related.R.InventoryItem appropriately.
func (o *InventoryItem) AddInventoryLevels(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*InventoryLevel) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.InventoryItemID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `inventory_level` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"inventory_item_id"}),
				strmangle.WhereClause("`", "`", 0, inventoryLevelPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.InventoryItemID, rel.LocationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.InventoryItemID = o.ID
		}
	}

	if o.R == nil {
		o.R = &inventoryItemR{
			InventoryLevels: related,
		}
	} else {
		o.R.InventoryLevels = append(o.R.InventoryLevels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &inventoryLevelR{
				InventoryItem: o,
			}
		} else {
			rel.R.InventoryItem = o
		}
	}
	return nil
}

// InventoryItems retrieves all the records using an executor.
func InventoryItems(mods ...qm.QueryMod) inventoryItemQuery {
	mods = append(mods, qm.From("`inventory_item`"))
	return inventoryItemQuery{NewQuery(mods...)}
}

// FindInventoryItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInventoryItem(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*InventoryItem, error) {
	inventoryItemObj := &InventoryItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `inventory_item` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, inventoryItemObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from inventory_item")
	}

	return inventoryItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *InventoryItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no inventory_item provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(inventoryItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	inventoryItemInsertCacheMut.RLock()
	cache, cached := inventoryItemInsertCache[key]
	inventoryItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			inventoryItemAllColumns,
			inventoryItemColumnsWithDefault,
			inventoryItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(inventoryItemType, inventoryItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(inventoryItemType, inventoryItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `inventory_item` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `inventory_item` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `inventory_item` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, inventoryItemPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into inventory_item")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for inventory_item")
	}

CacheNoHooks:
	if !cached {
		inventoryItemInsertCacheMut.Lock()
		inventoryItemInsertCache[key] = cache
		inventoryItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the InventoryItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *InventoryItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	inventoryItemUpdateCacheMut.RLock()
	cache, cached := inventoryItemUpdateCache[key]
	inventoryItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			inventoryItemAllColumns,
			inventoryItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update inventory_item, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `inventory_item` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, inventoryItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(inventoryItemType, inventoryItemMapping, append(wl, inventoryItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update inventory_item row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for inventory_item")
	}

	if !cached {
		inventoryItemUpdateCacheMut.Lock()
		inventoryItemUpdateCache[key] = cache
		inventoryItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q inventoryItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for inventory_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for inventory_item")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InventoryItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), inventoryItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `inventory_item` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, inventoryItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in inventoryItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all inventoryItem")
	}
	return rowsAff, nil
}

var mySQLInventoryItemUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *InventoryItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no inventory_item provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(inventoryItemColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLInventoryItemUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	inventoryItemUpsertCacheMut.RLock()
	cache, cached := inventoryItemUpsertCache[key]
	inventoryItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			inventoryItemAllColumns,
			inventoryItemColumnsWithDefault,
			inventoryItemColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			inventoryItemAllColumns,
			inventoryItemPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert inventory_item, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`inventory_item`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `inventory_item` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(inventoryItemType, inventoryItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(inventoryItemType, inventoryItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for inventory_item")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(inventoryItemType, inventoryItemMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for inventory_item")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for inventory_item")
	}

CacheNoHooks:
	if !cached {
		inventoryItemUpsertCacheMut.Lock()
		inventoryItemUpsertCache[key] = cache
		inventoryItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single InventoryItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *InventoryItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no InventoryItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), inventoryItemPrimaryKeyMapping)
	sql := "DELETE FROM `inventory_item` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from inventory_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for inventory_item")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q inventoryItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no inventoryItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from inventory_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for inventory_item")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InventoryItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(inventoryItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), inventoryItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `inventory_item` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, inventoryItemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from inventoryItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for inventory_item")
	}

	if len(inventoryItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *InventoryItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindInventoryItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InventoryItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := InventoryItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), inventoryItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `inventory_item`.* FROM `inventory_item` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, inventoryItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in InventoryItemSlice")
	}

	*o = slice

	return nil
}

// InventoryItemExists checks if the InventoryItem row exists.
func InventoryItemExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `inventory_item` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if inventory_item exists")
	}

	return exists, nil
}
