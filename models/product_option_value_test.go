// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testProductOptionValues(t *testing.T) {
	t.Parallel()

	query := ProductOptionValues()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testProductOptionValuesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductOptionValue{}
	if err = randomize.Struct(seed, o, productOptionValueDBTypes, true, productOptionValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOptionValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProductOptionValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProductOptionValuesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductOptionValue{}
	if err = randomize.Struct(seed, o, productOptionValueDBTypes, true, productOptionValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOptionValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ProductOptionValues().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProductOptionValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProductOptionValuesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductOptionValue{}
	if err = randomize.Struct(seed, o, productOptionValueDBTypes, true, productOptionValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOptionValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProductOptionValueSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProductOptionValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProductOptionValuesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductOptionValue{}
	if err = randomize.Struct(seed, o, productOptionValueDBTypes, true, productOptionValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOptionValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ProductOptionValueExists(ctx, tx, o.OptionID)
	if err != nil {
		t.Errorf("Unable to check if ProductOptionValue exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ProductOptionValueExists to return true, but got false.")
	}
}

func testProductOptionValuesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductOptionValue{}
	if err = randomize.Struct(seed, o, productOptionValueDBTypes, true, productOptionValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOptionValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	productOptionValueFound, err := FindProductOptionValue(ctx, tx, o.OptionID)
	if err != nil {
		t.Error(err)
	}

	if productOptionValueFound == nil {
		t.Error("want a record, got nil")
	}
}

func testProductOptionValuesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductOptionValue{}
	if err = randomize.Struct(seed, o, productOptionValueDBTypes, true, productOptionValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOptionValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ProductOptionValues().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testProductOptionValuesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductOptionValue{}
	if err = randomize.Struct(seed, o, productOptionValueDBTypes, true, productOptionValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOptionValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ProductOptionValues().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testProductOptionValuesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	productOptionValueOne := &ProductOptionValue{}
	productOptionValueTwo := &ProductOptionValue{}
	if err = randomize.Struct(seed, productOptionValueOne, productOptionValueDBTypes, false, productOptionValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOptionValue struct: %s", err)
	}
	if err = randomize.Struct(seed, productOptionValueTwo, productOptionValueDBTypes, false, productOptionValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOptionValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = productOptionValueOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = productOptionValueTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProductOptionValues().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testProductOptionValuesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	productOptionValueOne := &ProductOptionValue{}
	productOptionValueTwo := &ProductOptionValue{}
	if err = randomize.Struct(seed, productOptionValueOne, productOptionValueDBTypes, false, productOptionValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOptionValue struct: %s", err)
	}
	if err = randomize.Struct(seed, productOptionValueTwo, productOptionValueDBTypes, false, productOptionValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOptionValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = productOptionValueOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = productOptionValueTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProductOptionValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func productOptionValueBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProductOptionValue) error {
	*o = ProductOptionValue{}
	return nil
}

func productOptionValueAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProductOptionValue) error {
	*o = ProductOptionValue{}
	return nil
}

func productOptionValueAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ProductOptionValue) error {
	*o = ProductOptionValue{}
	return nil
}

func productOptionValueBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProductOptionValue) error {
	*o = ProductOptionValue{}
	return nil
}

func productOptionValueAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProductOptionValue) error {
	*o = ProductOptionValue{}
	return nil
}

func productOptionValueBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProductOptionValue) error {
	*o = ProductOptionValue{}
	return nil
}

func productOptionValueAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProductOptionValue) error {
	*o = ProductOptionValue{}
	return nil
}

func productOptionValueBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProductOptionValue) error {
	*o = ProductOptionValue{}
	return nil
}

func productOptionValueAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProductOptionValue) error {
	*o = ProductOptionValue{}
	return nil
}

func testProductOptionValuesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ProductOptionValue{}
	o := &ProductOptionValue{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, productOptionValueDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ProductOptionValue object: %s", err)
	}

	AddProductOptionValueHook(boil.BeforeInsertHook, productOptionValueBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	productOptionValueBeforeInsertHooks = []ProductOptionValueHook{}

	AddProductOptionValueHook(boil.AfterInsertHook, productOptionValueAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	productOptionValueAfterInsertHooks = []ProductOptionValueHook{}

	AddProductOptionValueHook(boil.AfterSelectHook, productOptionValueAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	productOptionValueAfterSelectHooks = []ProductOptionValueHook{}

	AddProductOptionValueHook(boil.BeforeUpdateHook, productOptionValueBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	productOptionValueBeforeUpdateHooks = []ProductOptionValueHook{}

	AddProductOptionValueHook(boil.AfterUpdateHook, productOptionValueAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	productOptionValueAfterUpdateHooks = []ProductOptionValueHook{}

	AddProductOptionValueHook(boil.BeforeDeleteHook, productOptionValueBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	productOptionValueBeforeDeleteHooks = []ProductOptionValueHook{}

	AddProductOptionValueHook(boil.AfterDeleteHook, productOptionValueAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	productOptionValueAfterDeleteHooks = []ProductOptionValueHook{}

	AddProductOptionValueHook(boil.BeforeUpsertHook, productOptionValueBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	productOptionValueBeforeUpsertHooks = []ProductOptionValueHook{}

	AddProductOptionValueHook(boil.AfterUpsertHook, productOptionValueAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	productOptionValueAfterUpsertHooks = []ProductOptionValueHook{}
}

func testProductOptionValuesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductOptionValue{}
	if err = randomize.Struct(seed, o, productOptionValueDBTypes, true, productOptionValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOptionValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProductOptionValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProductOptionValuesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductOptionValue{}
	if err = randomize.Struct(seed, o, productOptionValueDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ProductOptionValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(productOptionValueColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ProductOptionValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProductOptionValueToManyOption1ValueProductVariants(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductOptionValue
	var b, c ProductVariant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productOptionValueDBTypes, true, productOptionValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOptionValue struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, productVariantDBTypes, false, productVariantColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productVariantDBTypes, false, productVariantColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Option1ValueID, a.OptionID)
	queries.Assign(&c.Option1ValueID, a.OptionID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Option1ValueProductVariants().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Option1ValueID, b.Option1ValueID) {
			bFound = true
		}
		if queries.Equal(v.Option1ValueID, c.Option1ValueID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProductOptionValueSlice{&a}
	if err = a.L.LoadOption1ValueProductVariants(ctx, tx, false, (*[]*ProductOptionValue)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Option1ValueProductVariants); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Option1ValueProductVariants = nil
	if err = a.L.LoadOption1ValueProductVariants(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Option1ValueProductVariants); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProductOptionValueToManyOption2ValueProductVariants(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductOptionValue
	var b, c ProductVariant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productOptionValueDBTypes, true, productOptionValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOptionValue struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, productVariantDBTypes, false, productVariantColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productVariantDBTypes, false, productVariantColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Option2ValueID, a.OptionID)
	queries.Assign(&c.Option2ValueID, a.OptionID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Option2ValueProductVariants().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Option2ValueID, b.Option2ValueID) {
			bFound = true
		}
		if queries.Equal(v.Option2ValueID, c.Option2ValueID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProductOptionValueSlice{&a}
	if err = a.L.LoadOption2ValueProductVariants(ctx, tx, false, (*[]*ProductOptionValue)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Option2ValueProductVariants); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Option2ValueProductVariants = nil
	if err = a.L.LoadOption2ValueProductVariants(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Option2ValueProductVariants); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProductOptionValueToManyOption3ValueProductVariants(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductOptionValue
	var b, c ProductVariant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productOptionValueDBTypes, true, productOptionValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOptionValue struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, productVariantDBTypes, false, productVariantColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productVariantDBTypes, false, productVariantColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Option3ValueID, a.OptionID)
	queries.Assign(&c.Option3ValueID, a.OptionID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Option3ValueProductVariants().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Option3ValueID, b.Option3ValueID) {
			bFound = true
		}
		if queries.Equal(v.Option3ValueID, c.Option3ValueID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProductOptionValueSlice{&a}
	if err = a.L.LoadOption3ValueProductVariants(ctx, tx, false, (*[]*ProductOptionValue)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Option3ValueProductVariants); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Option3ValueProductVariants = nil
	if err = a.L.LoadOption3ValueProductVariants(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Option3ValueProductVariants); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProductOptionValueToManyAddOpOption1ValueProductVariants(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductOptionValue
	var b, c, d, e ProductVariant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productOptionValueDBTypes, false, strmangle.SetComplement(productOptionValuePrimaryKeyColumns, productOptionValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProductVariant{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ProductVariant{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOption1ValueProductVariants(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.OptionID, first.Option1ValueID) {
			t.Error("foreign key was wrong value", a.OptionID, first.Option1ValueID)
		}
		if !queries.Equal(a.OptionID, second.Option1ValueID) {
			t.Error("foreign key was wrong value", a.OptionID, second.Option1ValueID)
		}

		if first.R.Option1Value != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Option1Value != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Option1ValueProductVariants[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Option1ValueProductVariants[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Option1ValueProductVariants().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testProductOptionValueToManySetOpOption1ValueProductVariants(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductOptionValue
	var b, c, d, e ProductVariant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productOptionValueDBTypes, false, strmangle.SetComplement(productOptionValuePrimaryKeyColumns, productOptionValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProductVariant{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetOption1ValueProductVariants(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Option1ValueProductVariants().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetOption1ValueProductVariants(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Option1ValueProductVariants().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Option1ValueID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Option1ValueID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.OptionID, d.Option1ValueID) {
		t.Error("foreign key was wrong value", a.OptionID, d.Option1ValueID)
	}
	if !queries.Equal(a.OptionID, e.Option1ValueID) {
		t.Error("foreign key was wrong value", a.OptionID, e.Option1ValueID)
	}

	if b.R.Option1Value != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Option1Value != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Option1Value != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Option1Value != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Option1ValueProductVariants[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Option1ValueProductVariants[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testProductOptionValueToManyRemoveOpOption1ValueProductVariants(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductOptionValue
	var b, c, d, e ProductVariant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productOptionValueDBTypes, false, strmangle.SetComplement(productOptionValuePrimaryKeyColumns, productOptionValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProductVariant{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddOption1ValueProductVariants(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Option1ValueProductVariants().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveOption1ValueProductVariants(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Option1ValueProductVariants().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Option1ValueID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Option1ValueID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Option1Value != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Option1Value != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Option1Value != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Option1Value != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Option1ValueProductVariants) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Option1ValueProductVariants[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Option1ValueProductVariants[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testProductOptionValueToManyAddOpOption2ValueProductVariants(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductOptionValue
	var b, c, d, e ProductVariant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productOptionValueDBTypes, false, strmangle.SetComplement(productOptionValuePrimaryKeyColumns, productOptionValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProductVariant{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ProductVariant{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOption2ValueProductVariants(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.OptionID, first.Option2ValueID) {
			t.Error("foreign key was wrong value", a.OptionID, first.Option2ValueID)
		}
		if !queries.Equal(a.OptionID, second.Option2ValueID) {
			t.Error("foreign key was wrong value", a.OptionID, second.Option2ValueID)
		}

		if first.R.Option2Value != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Option2Value != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Option2ValueProductVariants[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Option2ValueProductVariants[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Option2ValueProductVariants().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testProductOptionValueToManySetOpOption2ValueProductVariants(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductOptionValue
	var b, c, d, e ProductVariant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productOptionValueDBTypes, false, strmangle.SetComplement(productOptionValuePrimaryKeyColumns, productOptionValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProductVariant{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetOption2ValueProductVariants(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Option2ValueProductVariants().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetOption2ValueProductVariants(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Option2ValueProductVariants().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Option2ValueID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Option2ValueID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.OptionID, d.Option2ValueID) {
		t.Error("foreign key was wrong value", a.OptionID, d.Option2ValueID)
	}
	if !queries.Equal(a.OptionID, e.Option2ValueID) {
		t.Error("foreign key was wrong value", a.OptionID, e.Option2ValueID)
	}

	if b.R.Option2Value != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Option2Value != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Option2Value != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Option2Value != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Option2ValueProductVariants[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Option2ValueProductVariants[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testProductOptionValueToManyRemoveOpOption2ValueProductVariants(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductOptionValue
	var b, c, d, e ProductVariant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productOptionValueDBTypes, false, strmangle.SetComplement(productOptionValuePrimaryKeyColumns, productOptionValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProductVariant{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddOption2ValueProductVariants(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Option2ValueProductVariants().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveOption2ValueProductVariants(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Option2ValueProductVariants().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Option2ValueID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Option2ValueID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Option2Value != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Option2Value != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Option2Value != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Option2Value != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Option2ValueProductVariants) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Option2ValueProductVariants[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Option2ValueProductVariants[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testProductOptionValueToManyAddOpOption3ValueProductVariants(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductOptionValue
	var b, c, d, e ProductVariant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productOptionValueDBTypes, false, strmangle.SetComplement(productOptionValuePrimaryKeyColumns, productOptionValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProductVariant{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ProductVariant{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOption3ValueProductVariants(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.OptionID, first.Option3ValueID) {
			t.Error("foreign key was wrong value", a.OptionID, first.Option3ValueID)
		}
		if !queries.Equal(a.OptionID, second.Option3ValueID) {
			t.Error("foreign key was wrong value", a.OptionID, second.Option3ValueID)
		}

		if first.R.Option3Value != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Option3Value != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Option3ValueProductVariants[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Option3ValueProductVariants[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Option3ValueProductVariants().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testProductOptionValueToManySetOpOption3ValueProductVariants(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductOptionValue
	var b, c, d, e ProductVariant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productOptionValueDBTypes, false, strmangle.SetComplement(productOptionValuePrimaryKeyColumns, productOptionValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProductVariant{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetOption3ValueProductVariants(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Option3ValueProductVariants().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetOption3ValueProductVariants(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Option3ValueProductVariants().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Option3ValueID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Option3ValueID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.OptionID, d.Option3ValueID) {
		t.Error("foreign key was wrong value", a.OptionID, d.Option3ValueID)
	}
	if !queries.Equal(a.OptionID, e.Option3ValueID) {
		t.Error("foreign key was wrong value", a.OptionID, e.Option3ValueID)
	}

	if b.R.Option3Value != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Option3Value != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Option3Value != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Option3Value != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Option3ValueProductVariants[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Option3ValueProductVariants[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testProductOptionValueToManyRemoveOpOption3ValueProductVariants(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductOptionValue
	var b, c, d, e ProductVariant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productOptionValueDBTypes, false, strmangle.SetComplement(productOptionValuePrimaryKeyColumns, productOptionValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProductVariant{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddOption3ValueProductVariants(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Option3ValueProductVariants().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveOption3ValueProductVariants(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Option3ValueProductVariants().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Option3ValueID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Option3ValueID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Option3Value != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Option3Value != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Option3Value != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Option3Value != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Option3ValueProductVariants) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Option3ValueProductVariants[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Option3ValueProductVariants[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testProductOptionValueToOneProductOptionUsingOption(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ProductOptionValue
	var foreign ProductOption

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, productOptionValueDBTypes, false, productOptionValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOptionValue struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, productOptionDBTypes, false, productOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOption struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.OptionID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Option().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ProductOptionValueSlice{&local}
	if err = local.L.LoadOption(ctx, tx, false, (*[]*ProductOptionValue)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Option == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Option = nil
	if err = local.L.LoadOption(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Option == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testProductOptionValueToOneSetOpProductOptionUsingOption(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductOptionValue
	var b, c ProductOption

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productOptionValueDBTypes, false, strmangle.SetComplement(productOptionValuePrimaryKeyColumns, productOptionValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productOptionDBTypes, false, strmangle.SetComplement(productOptionPrimaryKeyColumns, productOptionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productOptionDBTypes, false, strmangle.SetComplement(productOptionPrimaryKeyColumns, productOptionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ProductOption{&b, &c} {
		err = a.SetOption(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Option != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OptionProductOptionValue != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.OptionID != x.ID {
			t.Error("foreign key was wrong value", a.OptionID)
		}

		if exists, err := ProductOptionValueExists(ctx, tx, a.OptionID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testProductOptionValuesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductOptionValue{}
	if err = randomize.Struct(seed, o, productOptionValueDBTypes, true, productOptionValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOptionValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProductOptionValuesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductOptionValue{}
	if err = randomize.Struct(seed, o, productOptionValueDBTypes, true, productOptionValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOptionValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProductOptionValueSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProductOptionValuesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductOptionValue{}
	if err = randomize.Struct(seed, o, productOptionValueDBTypes, true, productOptionValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOptionValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProductOptionValues().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	productOptionValueDBTypes = map[string]string{`OptionID`: `bigint`, `Value`: `varchar`}
	_                         = bytes.MinRead
)

func testProductOptionValuesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(productOptionValuePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(productOptionValueAllColumns) == len(productOptionValuePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProductOptionValue{}
	if err = randomize.Struct(seed, o, productOptionValueDBTypes, true, productOptionValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOptionValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProductOptionValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, productOptionValueDBTypes, true, productOptionValuePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProductOptionValue struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testProductOptionValuesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(productOptionValueAllColumns) == len(productOptionValuePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProductOptionValue{}
	if err = randomize.Struct(seed, o, productOptionValueDBTypes, true, productOptionValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOptionValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProductOptionValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, productOptionValueDBTypes, true, productOptionValuePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProductOptionValue struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(productOptionValueAllColumns, productOptionValuePrimaryKeyColumns) {
		fields = productOptionValueAllColumns
	} else {
		fields = strmangle.SetComplement(
			productOptionValueAllColumns,
			productOptionValuePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ProductOptionValueSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testProductOptionValuesUpsert(t *testing.T) {
	t.Parallel()

	if len(productOptionValueAllColumns) == len(productOptionValuePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLProductOptionValueUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ProductOptionValue{}
	if err = randomize.Struct(seed, &o, productOptionValueDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ProductOptionValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProductOptionValue: %s", err)
	}

	count, err := ProductOptionValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, productOptionValueDBTypes, false, productOptionValuePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProductOptionValue struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProductOptionValue: %s", err)
	}

	count, err = ProductOptionValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
