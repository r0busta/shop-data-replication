// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductOptionValue is an object representing the database table.
type ProductOptionValue struct {
	OptionID int64  `boil:"option_id" json:"option_id" toml:"option_id" yaml:"option_id"`
	Value    string `boil:"value" json:"value" toml:"value" yaml:"value"`

	R *productOptionValueR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productOptionValueL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductOptionValueColumns = struct {
	OptionID string
	Value    string
}{
	OptionID: "option_id",
	Value:    "value",
}

var ProductOptionValueTableColumns = struct {
	OptionID string
	Value    string
}{
	OptionID: "product_option_value.option_id",
	Value:    "product_option_value.value",
}

// Generated where

var ProductOptionValueWhere = struct {
	OptionID whereHelperint64
	Value    whereHelperstring
}{
	OptionID: whereHelperint64{field: "`product_option_value`.`option_id`"},
	Value:    whereHelperstring{field: "`product_option_value`.`value`"},
}

// ProductOptionValueRels is where relationship names are stored.
var ProductOptionValueRels = struct {
	Option                      string
	Option1ValueProductVariants string
	Option2ValueProductVariants string
	Option3ValueProductVariants string
}{
	Option:                      "Option",
	Option1ValueProductVariants: "Option1ValueProductVariants",
	Option2ValueProductVariants: "Option2ValueProductVariants",
	Option3ValueProductVariants: "Option3ValueProductVariants",
}

// productOptionValueR is where relationships are stored.
type productOptionValueR struct {
	Option                      *ProductOption      `boil:"Option" json:"Option" toml:"Option" yaml:"Option"`
	Option1ValueProductVariants ProductVariantSlice `boil:"Option1ValueProductVariants" json:"Option1ValueProductVariants" toml:"Option1ValueProductVariants" yaml:"Option1ValueProductVariants"`
	Option2ValueProductVariants ProductVariantSlice `boil:"Option2ValueProductVariants" json:"Option2ValueProductVariants" toml:"Option2ValueProductVariants" yaml:"Option2ValueProductVariants"`
	Option3ValueProductVariants ProductVariantSlice `boil:"Option3ValueProductVariants" json:"Option3ValueProductVariants" toml:"Option3ValueProductVariants" yaml:"Option3ValueProductVariants"`
}

// NewStruct creates a new relationship struct
func (*productOptionValueR) NewStruct() *productOptionValueR {
	return &productOptionValueR{}
}

// productOptionValueL is where Load methods for each relationship are stored.
type productOptionValueL struct{}

var (
	productOptionValueAllColumns            = []string{"option_id", "value"}
	productOptionValueColumnsWithoutDefault = []string{"option_id", "value"}
	productOptionValueColumnsWithDefault    = []string{}
	productOptionValuePrimaryKeyColumns     = []string{"option_id"}
)

type (
	// ProductOptionValueSlice is an alias for a slice of pointers to ProductOptionValue.
	// This should almost always be used instead of []ProductOptionValue.
	ProductOptionValueSlice []*ProductOptionValue
	// ProductOptionValueHook is the signature for custom ProductOptionValue hook methods
	ProductOptionValueHook func(context.Context, boil.ContextExecutor, *ProductOptionValue) error

	productOptionValueQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productOptionValueType                 = reflect.TypeOf(&ProductOptionValue{})
	productOptionValueMapping              = queries.MakeStructMapping(productOptionValueType)
	productOptionValuePrimaryKeyMapping, _ = queries.BindMapping(productOptionValueType, productOptionValueMapping, productOptionValuePrimaryKeyColumns)
	productOptionValueInsertCacheMut       sync.RWMutex
	productOptionValueInsertCache          = make(map[string]insertCache)
	productOptionValueUpdateCacheMut       sync.RWMutex
	productOptionValueUpdateCache          = make(map[string]updateCache)
	productOptionValueUpsertCacheMut       sync.RWMutex
	productOptionValueUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productOptionValueBeforeInsertHooks []ProductOptionValueHook
var productOptionValueBeforeUpdateHooks []ProductOptionValueHook
var productOptionValueBeforeDeleteHooks []ProductOptionValueHook
var productOptionValueBeforeUpsertHooks []ProductOptionValueHook

var productOptionValueAfterInsertHooks []ProductOptionValueHook
var productOptionValueAfterSelectHooks []ProductOptionValueHook
var productOptionValueAfterUpdateHooks []ProductOptionValueHook
var productOptionValueAfterDeleteHooks []ProductOptionValueHook
var productOptionValueAfterUpsertHooks []ProductOptionValueHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProductOptionValue) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productOptionValueBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProductOptionValue) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productOptionValueBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProductOptionValue) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productOptionValueBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProductOptionValue) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productOptionValueBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProductOptionValue) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productOptionValueAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProductOptionValue) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productOptionValueAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProductOptionValue) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productOptionValueAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProductOptionValue) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productOptionValueAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProductOptionValue) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productOptionValueAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductOptionValueHook registers your hook function for all future operations.
func AddProductOptionValueHook(hookPoint boil.HookPoint, productOptionValueHook ProductOptionValueHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		productOptionValueBeforeInsertHooks = append(productOptionValueBeforeInsertHooks, productOptionValueHook)
	case boil.BeforeUpdateHook:
		productOptionValueBeforeUpdateHooks = append(productOptionValueBeforeUpdateHooks, productOptionValueHook)
	case boil.BeforeDeleteHook:
		productOptionValueBeforeDeleteHooks = append(productOptionValueBeforeDeleteHooks, productOptionValueHook)
	case boil.BeforeUpsertHook:
		productOptionValueBeforeUpsertHooks = append(productOptionValueBeforeUpsertHooks, productOptionValueHook)
	case boil.AfterInsertHook:
		productOptionValueAfterInsertHooks = append(productOptionValueAfterInsertHooks, productOptionValueHook)
	case boil.AfterSelectHook:
		productOptionValueAfterSelectHooks = append(productOptionValueAfterSelectHooks, productOptionValueHook)
	case boil.AfterUpdateHook:
		productOptionValueAfterUpdateHooks = append(productOptionValueAfterUpdateHooks, productOptionValueHook)
	case boil.AfterDeleteHook:
		productOptionValueAfterDeleteHooks = append(productOptionValueAfterDeleteHooks, productOptionValueHook)
	case boil.AfterUpsertHook:
		productOptionValueAfterUpsertHooks = append(productOptionValueAfterUpsertHooks, productOptionValueHook)
	}
}

// One returns a single productOptionValue record from the query.
func (q productOptionValueQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProductOptionValue, error) {
	o := &ProductOptionValue{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for product_option_value")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProductOptionValue records from the query.
func (q productOptionValueQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductOptionValueSlice, error) {
	var o []*ProductOptionValue

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ProductOptionValue slice")
	}

	if len(productOptionValueAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProductOptionValue records in the query.
func (q productOptionValueQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count product_option_value rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productOptionValueQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if product_option_value exists")
	}

	return count > 0, nil
}

// Option pointed to by the foreign key.
func (o *ProductOptionValue) Option(mods ...qm.QueryMod) productOptionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.OptionID),
	}

	queryMods = append(queryMods, mods...)

	query := ProductOptions(queryMods...)
	queries.SetFrom(query.Query, "`product_option`")

	return query
}

// Option1ValueProductVariants retrieves all the product_variant's ProductVariants with an executor via option_1_value_id column.
func (o *ProductOptionValue) Option1ValueProductVariants(mods ...qm.QueryMod) productVariantQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`product_variant`.`option_1_value_id`=?", o.OptionID),
	)

	query := ProductVariants(queryMods...)
	queries.SetFrom(query.Query, "`product_variant`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`product_variant`.*"})
	}

	return query
}

// Option2ValueProductVariants retrieves all the product_variant's ProductVariants with an executor via option_2_value_id column.
func (o *ProductOptionValue) Option2ValueProductVariants(mods ...qm.QueryMod) productVariantQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`product_variant`.`option_2_value_id`=?", o.OptionID),
	)

	query := ProductVariants(queryMods...)
	queries.SetFrom(query.Query, "`product_variant`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`product_variant`.*"})
	}

	return query
}

// Option3ValueProductVariants retrieves all the product_variant's ProductVariants with an executor via option_3_value_id column.
func (o *ProductOptionValue) Option3ValueProductVariants(mods ...qm.QueryMod) productVariantQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`product_variant`.`option_3_value_id`=?", o.OptionID),
	)

	query := ProductVariants(queryMods...)
	queries.SetFrom(query.Query, "`product_variant`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`product_variant`.*"})
	}

	return query
}

// LoadOption allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productOptionValueL) LoadOption(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductOptionValue interface{}, mods queries.Applicator) error {
	var slice []*ProductOptionValue
	var object *ProductOptionValue

	if singular {
		object = maybeProductOptionValue.(*ProductOptionValue)
	} else {
		slice = *maybeProductOptionValue.(*[]*ProductOptionValue)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productOptionValueR{}
		}
		args = append(args, object.OptionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productOptionValueR{}
			}

			for _, a := range args {
				if a == obj.OptionID {
					continue Outer
				}
			}

			args = append(args, obj.OptionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_option`),
		qm.WhereIn(`product_option.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProductOption")
	}

	var resultSlice []*ProductOption
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProductOption")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for product_option")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_option")
	}

	if len(productOptionValueAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Option = foreign
		if foreign.R == nil {
			foreign.R = &productOptionR{}
		}
		foreign.R.OptionProductOptionValue = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OptionID == foreign.ID {
				local.R.Option = foreign
				if foreign.R == nil {
					foreign.R = &productOptionR{}
				}
				foreign.R.OptionProductOptionValue = local
				break
			}
		}
	}

	return nil
}

// LoadOption1ValueProductVariants allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productOptionValueL) LoadOption1ValueProductVariants(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductOptionValue interface{}, mods queries.Applicator) error {
	var slice []*ProductOptionValue
	var object *ProductOptionValue

	if singular {
		object = maybeProductOptionValue.(*ProductOptionValue)
	} else {
		slice = *maybeProductOptionValue.(*[]*ProductOptionValue)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productOptionValueR{}
		}
		args = append(args, object.OptionID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productOptionValueR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OptionID) {
					continue Outer
				}
			}

			args = append(args, obj.OptionID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_variant`),
		qm.WhereIn(`product_variant.option_1_value_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load product_variant")
	}

	var resultSlice []*ProductVariant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice product_variant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on product_variant")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_variant")
	}

	if len(productVariantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Option1ValueProductVariants = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productVariantR{}
			}
			foreign.R.Option1Value = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.OptionID, foreign.Option1ValueID) {
				local.R.Option1ValueProductVariants = append(local.R.Option1ValueProductVariants, foreign)
				if foreign.R == nil {
					foreign.R = &productVariantR{}
				}
				foreign.R.Option1Value = local
				break
			}
		}
	}

	return nil
}

// LoadOption2ValueProductVariants allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productOptionValueL) LoadOption2ValueProductVariants(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductOptionValue interface{}, mods queries.Applicator) error {
	var slice []*ProductOptionValue
	var object *ProductOptionValue

	if singular {
		object = maybeProductOptionValue.(*ProductOptionValue)
	} else {
		slice = *maybeProductOptionValue.(*[]*ProductOptionValue)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productOptionValueR{}
		}
		args = append(args, object.OptionID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productOptionValueR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OptionID) {
					continue Outer
				}
			}

			args = append(args, obj.OptionID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_variant`),
		qm.WhereIn(`product_variant.option_2_value_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load product_variant")
	}

	var resultSlice []*ProductVariant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice product_variant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on product_variant")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_variant")
	}

	if len(productVariantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Option2ValueProductVariants = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productVariantR{}
			}
			foreign.R.Option2Value = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.OptionID, foreign.Option2ValueID) {
				local.R.Option2ValueProductVariants = append(local.R.Option2ValueProductVariants, foreign)
				if foreign.R == nil {
					foreign.R = &productVariantR{}
				}
				foreign.R.Option2Value = local
				break
			}
		}
	}

	return nil
}

// LoadOption3ValueProductVariants allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productOptionValueL) LoadOption3ValueProductVariants(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductOptionValue interface{}, mods queries.Applicator) error {
	var slice []*ProductOptionValue
	var object *ProductOptionValue

	if singular {
		object = maybeProductOptionValue.(*ProductOptionValue)
	} else {
		slice = *maybeProductOptionValue.(*[]*ProductOptionValue)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productOptionValueR{}
		}
		args = append(args, object.OptionID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productOptionValueR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OptionID) {
					continue Outer
				}
			}

			args = append(args, obj.OptionID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_variant`),
		qm.WhereIn(`product_variant.option_3_value_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load product_variant")
	}

	var resultSlice []*ProductVariant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice product_variant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on product_variant")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_variant")
	}

	if len(productVariantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Option3ValueProductVariants = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productVariantR{}
			}
			foreign.R.Option3Value = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.OptionID, foreign.Option3ValueID) {
				local.R.Option3ValueProductVariants = append(local.R.Option3ValueProductVariants, foreign)
				if foreign.R == nil {
					foreign.R = &productVariantR{}
				}
				foreign.R.Option3Value = local
				break
			}
		}
	}

	return nil
}

// SetOption of the productOptionValue to the related item.
// Sets o.R.Option to related.
// Adds o to related.R.OptionProductOptionValue.
func (o *ProductOptionValue) SetOption(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ProductOption) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `product_option_value` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"option_id"}),
		strmangle.WhereClause("`", "`", 0, productOptionValuePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.OptionID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OptionID = related.ID
	if o.R == nil {
		o.R = &productOptionValueR{
			Option: related,
		}
	} else {
		o.R.Option = related
	}

	if related.R == nil {
		related.R = &productOptionR{
			OptionProductOptionValue: o,
		}
	} else {
		related.R.OptionProductOptionValue = o
	}

	return nil
}

// AddOption1ValueProductVariants adds the given related objects to the existing relationships
// of the product_option_value, optionally inserting them as new records.
// Appends related to o.R.Option1ValueProductVariants.
// Sets related.R.Option1Value appropriately.
func (o *ProductOptionValue) AddOption1ValueProductVariants(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductVariant) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Option1ValueID, o.OptionID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `product_variant` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"option_1_value_id"}),
				strmangle.WhereClause("`", "`", 0, productVariantPrimaryKeyColumns),
			)
			values := []interface{}{o.OptionID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Option1ValueID, o.OptionID)
		}
	}

	if o.R == nil {
		o.R = &productOptionValueR{
			Option1ValueProductVariants: related,
		}
	} else {
		o.R.Option1ValueProductVariants = append(o.R.Option1ValueProductVariants, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productVariantR{
				Option1Value: o,
			}
		} else {
			rel.R.Option1Value = o
		}
	}
	return nil
}

// SetOption1ValueProductVariants removes all previously related items of the
// product_option_value replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Option1Value's Option1ValueProductVariants accordingly.
// Replaces o.R.Option1ValueProductVariants with related.
// Sets related.R.Option1Value's Option1ValueProductVariants accordingly.
func (o *ProductOptionValue) SetOption1ValueProductVariants(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductVariant) error {
	query := "update `product_variant` set `option_1_value_id` = null where `option_1_value_id` = ?"
	values := []interface{}{o.OptionID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Option1ValueProductVariants {
			queries.SetScanner(&rel.Option1ValueID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Option1Value = nil
		}

		o.R.Option1ValueProductVariants = nil
	}
	return o.AddOption1ValueProductVariants(ctx, exec, insert, related...)
}

// RemoveOption1ValueProductVariants relationships from objects passed in.
// Removes related items from R.Option1ValueProductVariants (uses pointer comparison, removal does not keep order)
// Sets related.R.Option1Value.
func (o *ProductOptionValue) RemoveOption1ValueProductVariants(ctx context.Context, exec boil.ContextExecutor, related ...*ProductVariant) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Option1ValueID, nil)
		if rel.R != nil {
			rel.R.Option1Value = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("option_1_value_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Option1ValueProductVariants {
			if rel != ri {
				continue
			}

			ln := len(o.R.Option1ValueProductVariants)
			if ln > 1 && i < ln-1 {
				o.R.Option1ValueProductVariants[i] = o.R.Option1ValueProductVariants[ln-1]
			}
			o.R.Option1ValueProductVariants = o.R.Option1ValueProductVariants[:ln-1]
			break
		}
	}

	return nil
}

// AddOption2ValueProductVariants adds the given related objects to the existing relationships
// of the product_option_value, optionally inserting them as new records.
// Appends related to o.R.Option2ValueProductVariants.
// Sets related.R.Option2Value appropriately.
func (o *ProductOptionValue) AddOption2ValueProductVariants(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductVariant) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Option2ValueID, o.OptionID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `product_variant` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"option_2_value_id"}),
				strmangle.WhereClause("`", "`", 0, productVariantPrimaryKeyColumns),
			)
			values := []interface{}{o.OptionID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Option2ValueID, o.OptionID)
		}
	}

	if o.R == nil {
		o.R = &productOptionValueR{
			Option2ValueProductVariants: related,
		}
	} else {
		o.R.Option2ValueProductVariants = append(o.R.Option2ValueProductVariants, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productVariantR{
				Option2Value: o,
			}
		} else {
			rel.R.Option2Value = o
		}
	}
	return nil
}

// SetOption2ValueProductVariants removes all previously related items of the
// product_option_value replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Option2Value's Option2ValueProductVariants accordingly.
// Replaces o.R.Option2ValueProductVariants with related.
// Sets related.R.Option2Value's Option2ValueProductVariants accordingly.
func (o *ProductOptionValue) SetOption2ValueProductVariants(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductVariant) error {
	query := "update `product_variant` set `option_2_value_id` = null where `option_2_value_id` = ?"
	values := []interface{}{o.OptionID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Option2ValueProductVariants {
			queries.SetScanner(&rel.Option2ValueID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Option2Value = nil
		}

		o.R.Option2ValueProductVariants = nil
	}
	return o.AddOption2ValueProductVariants(ctx, exec, insert, related...)
}

// RemoveOption2ValueProductVariants relationships from objects passed in.
// Removes related items from R.Option2ValueProductVariants (uses pointer comparison, removal does not keep order)
// Sets related.R.Option2Value.
func (o *ProductOptionValue) RemoveOption2ValueProductVariants(ctx context.Context, exec boil.ContextExecutor, related ...*ProductVariant) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Option2ValueID, nil)
		if rel.R != nil {
			rel.R.Option2Value = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("option_2_value_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Option2ValueProductVariants {
			if rel != ri {
				continue
			}

			ln := len(o.R.Option2ValueProductVariants)
			if ln > 1 && i < ln-1 {
				o.R.Option2ValueProductVariants[i] = o.R.Option2ValueProductVariants[ln-1]
			}
			o.R.Option2ValueProductVariants = o.R.Option2ValueProductVariants[:ln-1]
			break
		}
	}

	return nil
}

// AddOption3ValueProductVariants adds the given related objects to the existing relationships
// of the product_option_value, optionally inserting them as new records.
// Appends related to o.R.Option3ValueProductVariants.
// Sets related.R.Option3Value appropriately.
func (o *ProductOptionValue) AddOption3ValueProductVariants(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductVariant) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Option3ValueID, o.OptionID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `product_variant` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"option_3_value_id"}),
				strmangle.WhereClause("`", "`", 0, productVariantPrimaryKeyColumns),
			)
			values := []interface{}{o.OptionID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Option3ValueID, o.OptionID)
		}
	}

	if o.R == nil {
		o.R = &productOptionValueR{
			Option3ValueProductVariants: related,
		}
	} else {
		o.R.Option3ValueProductVariants = append(o.R.Option3ValueProductVariants, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productVariantR{
				Option3Value: o,
			}
		} else {
			rel.R.Option3Value = o
		}
	}
	return nil
}

// SetOption3ValueProductVariants removes all previously related items of the
// product_option_value replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Option3Value's Option3ValueProductVariants accordingly.
// Replaces o.R.Option3ValueProductVariants with related.
// Sets related.R.Option3Value's Option3ValueProductVariants accordingly.
func (o *ProductOptionValue) SetOption3ValueProductVariants(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductVariant) error {
	query := "update `product_variant` set `option_3_value_id` = null where `option_3_value_id` = ?"
	values := []interface{}{o.OptionID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Option3ValueProductVariants {
			queries.SetScanner(&rel.Option3ValueID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Option3Value = nil
		}

		o.R.Option3ValueProductVariants = nil
	}
	return o.AddOption3ValueProductVariants(ctx, exec, insert, related...)
}

// RemoveOption3ValueProductVariants relationships from objects passed in.
// Removes related items from R.Option3ValueProductVariants (uses pointer comparison, removal does not keep order)
// Sets related.R.Option3Value.
func (o *ProductOptionValue) RemoveOption3ValueProductVariants(ctx context.Context, exec boil.ContextExecutor, related ...*ProductVariant) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Option3ValueID, nil)
		if rel.R != nil {
			rel.R.Option3Value = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("option_3_value_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Option3ValueProductVariants {
			if rel != ri {
				continue
			}

			ln := len(o.R.Option3ValueProductVariants)
			if ln > 1 && i < ln-1 {
				o.R.Option3ValueProductVariants[i] = o.R.Option3ValueProductVariants[ln-1]
			}
			o.R.Option3ValueProductVariants = o.R.Option3ValueProductVariants[:ln-1]
			break
		}
	}

	return nil
}

// ProductOptionValues retrieves all the records using an executor.
func ProductOptionValues(mods ...qm.QueryMod) productOptionValueQuery {
	mods = append(mods, qm.From("`product_option_value`"))
	return productOptionValueQuery{NewQuery(mods...)}
}

// FindProductOptionValue retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductOptionValue(ctx context.Context, exec boil.ContextExecutor, optionID int64, selectCols ...string) (*ProductOptionValue, error) {
	productOptionValueObj := &ProductOptionValue{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `product_option_value` where `option_id`=?", sel,
	)

	q := queries.Raw(query, optionID)

	err := q.Bind(ctx, exec, productOptionValueObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from product_option_value")
	}

	if err = productOptionValueObj.doAfterSelectHooks(ctx, exec); err != nil {
		return productOptionValueObj, err
	}

	return productOptionValueObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductOptionValue) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no product_option_value provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productOptionValueColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productOptionValueInsertCacheMut.RLock()
	cache, cached := productOptionValueInsertCache[key]
	productOptionValueInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productOptionValueAllColumns,
			productOptionValueColumnsWithDefault,
			productOptionValueColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(productOptionValueType, productOptionValueMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productOptionValueType, productOptionValueMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `product_option_value` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `product_option_value` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `product_option_value` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, productOptionValuePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into product_option_value")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.OptionID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for product_option_value")
	}

CacheNoHooks:
	if !cached {
		productOptionValueInsertCacheMut.Lock()
		productOptionValueInsertCache[key] = cache
		productOptionValueInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProductOptionValue.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductOptionValue) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productOptionValueUpdateCacheMut.RLock()
	cache, cached := productOptionValueUpdateCache[key]
	productOptionValueUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productOptionValueAllColumns,
			productOptionValuePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update product_option_value, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `product_option_value` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, productOptionValuePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productOptionValueType, productOptionValueMapping, append(wl, productOptionValuePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update product_option_value row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for product_option_value")
	}

	if !cached {
		productOptionValueUpdateCacheMut.Lock()
		productOptionValueUpdateCache[key] = cache
		productOptionValueUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q productOptionValueQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for product_option_value")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for product_option_value")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductOptionValueSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productOptionValuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `product_option_value` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productOptionValuePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in productOptionValue slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all productOptionValue")
	}
	return rowsAff, nil
}

var mySQLProductOptionValueUniqueColumns = []string{
	"option_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductOptionValue) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no product_option_value provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productOptionValueColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLProductOptionValueUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productOptionValueUpsertCacheMut.RLock()
	cache, cached := productOptionValueUpsertCache[key]
	productOptionValueUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			productOptionValueAllColumns,
			productOptionValueColumnsWithDefault,
			productOptionValueColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			productOptionValueAllColumns,
			productOptionValuePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert product_option_value, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`product_option_value`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `product_option_value` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(productOptionValueType, productOptionValueMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productOptionValueType, productOptionValueMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for product_option_value")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(productOptionValueType, productOptionValueMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for product_option_value")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for product_option_value")
	}

CacheNoHooks:
	if !cached {
		productOptionValueUpsertCacheMut.Lock()
		productOptionValueUpsertCache[key] = cache
		productOptionValueUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ProductOptionValue record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductOptionValue) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ProductOptionValue provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productOptionValuePrimaryKeyMapping)
	sql := "DELETE FROM `product_option_value` WHERE `option_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from product_option_value")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for product_option_value")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q productOptionValueQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no productOptionValueQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from product_option_value")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for product_option_value")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductOptionValueSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productOptionValueBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productOptionValuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `product_option_value` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productOptionValuePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from productOptionValue slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for product_option_value")
	}

	if len(productOptionValueAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductOptionValue) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProductOptionValue(ctx, exec, o.OptionID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductOptionValueSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductOptionValueSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productOptionValuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `product_option_value`.* FROM `product_option_value` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productOptionValuePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProductOptionValueSlice")
	}

	*o = slice

	return nil
}

// ProductOptionValueExists checks if the ProductOptionValue row exists.
func ProductOptionValueExists(ctx context.Context, exec boil.ContextExecutor, optionID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `product_option_value` where `option_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, optionID)
	}
	row := exec.QueryRowContext(ctx, sql, optionID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if product_option_value exists")
	}

	return exists, nil
}
