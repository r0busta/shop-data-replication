// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Product is an object representing the database table.
type Product struct {
	ID             int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	BodyHTML       null.String `boil:"body_html" json:"body_html,omitempty" toml:"body_html" yaml:"body_html,omitempty"`
	Title          null.String `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	Handle         string      `boil:"handle" json:"handle" toml:"handle" yaml:"handle"`
	ProductType    null.String `boil:"product_type" json:"product_type,omitempty" toml:"product_type" yaml:"product_type,omitempty"`
	Vendor         null.String `boil:"vendor" json:"vendor,omitempty" toml:"vendor" yaml:"vendor,omitempty"`
	CreatedAt      null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt      null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	PublishedAt    null.Time   `boil:"published_at" json:"published_at,omitempty" toml:"published_at" yaml:"published_at,omitempty"`
	PublishedScope string      `boil:"published_scope" json:"published_scope" toml:"published_scope" yaml:"published_scope"`
	Status         int8        `boil:"status" json:"status" toml:"status" yaml:"status"`
	TemplateSuffix null.String `boil:"template_suffix" json:"template_suffix,omitempty" toml:"template_suffix" yaml:"template_suffix,omitempty"`

	R *productR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductColumns = struct {
	ID             string
	BodyHTML       string
	Title          string
	Handle         string
	ProductType    string
	Vendor         string
	CreatedAt      string
	UpdatedAt      string
	PublishedAt    string
	PublishedScope string
	Status         string
	TemplateSuffix string
}{
	ID:             "id",
	BodyHTML:       "body_html",
	Title:          "title",
	Handle:         "handle",
	ProductType:    "product_type",
	Vendor:         "vendor",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	PublishedAt:    "published_at",
	PublishedScope: "published_scope",
	Status:         "status",
	TemplateSuffix: "template_suffix",
}

// Generated where

type whereHelperint8 struct{ field string }

func (w whereHelperint8) EQ(x int8) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint8) NEQ(x int8) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint8) LT(x int8) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint8) LTE(x int8) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint8) GT(x int8) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint8) GTE(x int8) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint8) IN(slice []int8) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint8) NIN(slice []int8) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var ProductWhere = struct {
	ID             whereHelperint64
	BodyHTML       whereHelpernull_String
	Title          whereHelpernull_String
	Handle         whereHelperstring
	ProductType    whereHelpernull_String
	Vendor         whereHelpernull_String
	CreatedAt      whereHelpernull_Time
	UpdatedAt      whereHelpernull_Time
	PublishedAt    whereHelpernull_Time
	PublishedScope whereHelperstring
	Status         whereHelperint8
	TemplateSuffix whereHelpernull_String
}{
	ID:             whereHelperint64{field: "`product`.`id`"},
	BodyHTML:       whereHelpernull_String{field: "`product`.`body_html`"},
	Title:          whereHelpernull_String{field: "`product`.`title`"},
	Handle:         whereHelperstring{field: "`product`.`handle`"},
	ProductType:    whereHelpernull_String{field: "`product`.`product_type`"},
	Vendor:         whereHelpernull_String{field: "`product`.`vendor`"},
	CreatedAt:      whereHelpernull_Time{field: "`product`.`created_at`"},
	UpdatedAt:      whereHelpernull_Time{field: "`product`.`updated_at`"},
	PublishedAt:    whereHelpernull_Time{field: "`product`.`published_at`"},
	PublishedScope: whereHelperstring{field: "`product`.`published_scope`"},
	Status:         whereHelperint8{field: "`product`.`status`"},
	TemplateSuffix: whereHelpernull_String{field: "`product`.`template_suffix`"},
}

// ProductRels is where relationship names are stored.
var ProductRels = struct {
	Collections     string
	ProductImages   string
	ProductOptions  string
	ProductTags     string
	ProductVariants string
}{
	Collections:     "Collections",
	ProductImages:   "ProductImages",
	ProductOptions:  "ProductOptions",
	ProductTags:     "ProductTags",
	ProductVariants: "ProductVariants",
}

// productR is where relationships are stored.
type productR struct {
	Collections     CollectionSlice     `boil:"Collections" json:"Collections" toml:"Collections" yaml:"Collections"`
	ProductImages   ProductImageSlice   `boil:"ProductImages" json:"ProductImages" toml:"ProductImages" yaml:"ProductImages"`
	ProductOptions  ProductOptionSlice  `boil:"ProductOptions" json:"ProductOptions" toml:"ProductOptions" yaml:"ProductOptions"`
	ProductTags     ProductTagSlice     `boil:"ProductTags" json:"ProductTags" toml:"ProductTags" yaml:"ProductTags"`
	ProductVariants ProductVariantSlice `boil:"ProductVariants" json:"ProductVariants" toml:"ProductVariants" yaml:"ProductVariants"`
}

// NewStruct creates a new relationship struct
func (*productR) NewStruct() *productR {
	return &productR{}
}

// productL is where Load methods for each relationship are stored.
type productL struct{}

var (
	productAllColumns            = []string{"id", "body_html", "title", "handle", "product_type", "vendor", "created_at", "updated_at", "published_at", "published_scope", "status", "template_suffix"}
	productColumnsWithoutDefault = []string{"id", "body_html", "title", "handle", "product_type", "vendor", "created_at", "updated_at", "published_at", "published_scope", "status", "template_suffix"}
	productColumnsWithDefault    = []string{}
	productPrimaryKeyColumns     = []string{"id"}
)

type (
	// ProductSlice is an alias for a slice of pointers to Product.
	// This should generally be used opposed to []Product.
	ProductSlice []*Product
	// ProductHook is the signature for custom Product hook methods
	ProductHook func(context.Context, boil.ContextExecutor, *Product) error

	productQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productType                 = reflect.TypeOf(&Product{})
	productMapping              = queries.MakeStructMapping(productType)
	productPrimaryKeyMapping, _ = queries.BindMapping(productType, productMapping, productPrimaryKeyColumns)
	productInsertCacheMut       sync.RWMutex
	productInsertCache          = make(map[string]insertCache)
	productUpdateCacheMut       sync.RWMutex
	productUpdateCache          = make(map[string]updateCache)
	productUpsertCacheMut       sync.RWMutex
	productUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productBeforeInsertHooks []ProductHook
var productBeforeUpdateHooks []ProductHook
var productBeforeDeleteHooks []ProductHook
var productBeforeUpsertHooks []ProductHook

var productAfterInsertHooks []ProductHook
var productAfterSelectHooks []ProductHook
var productAfterUpdateHooks []ProductHook
var productAfterDeleteHooks []ProductHook
var productAfterUpsertHooks []ProductHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Product) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Product) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Product) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Product) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Product) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Product) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Product) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Product) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Product) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductHook registers your hook function for all future operations.
func AddProductHook(hookPoint boil.HookPoint, productHook ProductHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		productBeforeInsertHooks = append(productBeforeInsertHooks, productHook)
	case boil.BeforeUpdateHook:
		productBeforeUpdateHooks = append(productBeforeUpdateHooks, productHook)
	case boil.BeforeDeleteHook:
		productBeforeDeleteHooks = append(productBeforeDeleteHooks, productHook)
	case boil.BeforeUpsertHook:
		productBeforeUpsertHooks = append(productBeforeUpsertHooks, productHook)
	case boil.AfterInsertHook:
		productAfterInsertHooks = append(productAfterInsertHooks, productHook)
	case boil.AfterSelectHook:
		productAfterSelectHooks = append(productAfterSelectHooks, productHook)
	case boil.AfterUpdateHook:
		productAfterUpdateHooks = append(productAfterUpdateHooks, productHook)
	case boil.AfterDeleteHook:
		productAfterDeleteHooks = append(productAfterDeleteHooks, productHook)
	case boil.AfterUpsertHook:
		productAfterUpsertHooks = append(productAfterUpsertHooks, productHook)
	}
}

// One returns a single product record from the query.
func (q productQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Product, error) {
	o := &Product{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for product")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Product records from the query.
func (q productQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductSlice, error) {
	var o []*Product

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Product slice")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Product records in the query.
func (q productQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count product rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if product exists")
	}

	return count > 0, nil
}

// Collections retrieves all the collection's Collections with an executor.
func (o *Product) Collections(mods ...qm.QueryMod) collectionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("`collection_product` on `collection`.`id` = `collection_product`.`collection_id`"),
		qm.Where("`collection_product`.`product_id`=?", o.ID),
	)

	query := Collections(queryMods...)
	queries.SetFrom(query.Query, "`collection`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`collection`.*"})
	}

	return query
}

// ProductImages retrieves all the product_image's ProductImages with an executor.
func (o *Product) ProductImages(mods ...qm.QueryMod) productImageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`product_image`.`product_id`=?", o.ID),
	)

	query := ProductImages(queryMods...)
	queries.SetFrom(query.Query, "`product_image`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`product_image`.*"})
	}

	return query
}

// ProductOptions retrieves all the product_option's ProductOptions with an executor.
func (o *Product) ProductOptions(mods ...qm.QueryMod) productOptionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`product_option`.`product_id`=?", o.ID),
	)

	query := ProductOptions(queryMods...)
	queries.SetFrom(query.Query, "`product_option`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`product_option`.*"})
	}

	return query
}

// ProductTags retrieves all the product_tag's ProductTags with an executor.
func (o *Product) ProductTags(mods ...qm.QueryMod) productTagQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`product_tag`.`product_id`=?", o.ID),
	)

	query := ProductTags(queryMods...)
	queries.SetFrom(query.Query, "`product_tag`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`product_tag`.*"})
	}

	return query
}

// ProductVariants retrieves all the product_variant's ProductVariants with an executor.
func (o *Product) ProductVariants(mods ...qm.QueryMod) productVariantQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`product_variant`.`product_id`=?", o.ID),
	)

	query := ProductVariants(queryMods...)
	queries.SetFrom(query.Query, "`product_variant`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`product_variant`.*"})
	}

	return query
}

// LoadCollections allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productL) LoadCollections(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProduct interface{}, mods queries.Applicator) error {
	var slice []*Product
	var object *Product

	if singular {
		object = maybeProduct.(*Product)
	} else {
		slice = *maybeProduct.(*[]*Product)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("`collection`.id, `collection`.image_id, `collection`.body_html, `collection`.handle, `collection`.published_at, `collection`.published_scope, `collection`.sort_order, `collection`.title, `collection`.template_suffix, `collection`.updated_at, `a`.`product_id`"),
		qm.From("`collection`"),
		qm.InnerJoin("`collection_product` as `a` on `collection`.`id` = `a`.`collection_id`"),
		qm.WhereIn("`a`.`product_id` in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load collection")
	}

	var resultSlice []*Collection

	var localJoinCols []int64
	for results.Next() {
		one := new(Collection)
		var localJoinCol int64

		err = results.Scan(&one.ID, &one.ImageID, &one.BodyHTML, &one.Handle, &one.PublishedAt, &one.PublishedScope, &one.SortOrder, &one.Title, &one.TemplateSuffix, &one.UpdatedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for collection")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice collection")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on collection")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for collection")
	}

	if len(collectionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Collections = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &collectionR{}
			}
			foreign.R.Products = append(foreign.R.Products, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Collections = append(local.R.Collections, foreign)
				if foreign.R == nil {
					foreign.R = &collectionR{}
				}
				foreign.R.Products = append(foreign.R.Products, local)
				break
			}
		}
	}

	return nil
}

// LoadProductImages allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productL) LoadProductImages(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProduct interface{}, mods queries.Applicator) error {
	var slice []*Product
	var object *Product

	if singular {
		object = maybeProduct.(*Product)
	} else {
		slice = *maybeProduct.(*[]*Product)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_image`),
		qm.WhereIn(`product_image.product_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load product_image")
	}

	var resultSlice []*ProductImage
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice product_image")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on product_image")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_image")
	}

	if len(productImageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductImages = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productImageR{}
			}
			foreign.R.Product = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ProductID {
				local.R.ProductImages = append(local.R.ProductImages, foreign)
				if foreign.R == nil {
					foreign.R = &productImageR{}
				}
				foreign.R.Product = local
				break
			}
		}
	}

	return nil
}

// LoadProductOptions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productL) LoadProductOptions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProduct interface{}, mods queries.Applicator) error {
	var slice []*Product
	var object *Product

	if singular {
		object = maybeProduct.(*Product)
	} else {
		slice = *maybeProduct.(*[]*Product)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_option`),
		qm.WhereIn(`product_option.product_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load product_option")
	}

	var resultSlice []*ProductOption
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice product_option")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on product_option")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_option")
	}

	if len(productOptionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductOptions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productOptionR{}
			}
			foreign.R.Product = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ProductID) {
				local.R.ProductOptions = append(local.R.ProductOptions, foreign)
				if foreign.R == nil {
					foreign.R = &productOptionR{}
				}
				foreign.R.Product = local
				break
			}
		}
	}

	return nil
}

// LoadProductTags allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productL) LoadProductTags(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProduct interface{}, mods queries.Applicator) error {
	var slice []*Product
	var object *Product

	if singular {
		object = maybeProduct.(*Product)
	} else {
		slice = *maybeProduct.(*[]*Product)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_tag`),
		qm.WhereIn(`product_tag.product_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load product_tag")
	}

	var resultSlice []*ProductTag
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice product_tag")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on product_tag")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_tag")
	}

	if len(productTagAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductTags = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productTagR{}
			}
			foreign.R.Product = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ProductID {
				local.R.ProductTags = append(local.R.ProductTags, foreign)
				if foreign.R == nil {
					foreign.R = &productTagR{}
				}
				foreign.R.Product = local
				break
			}
		}
	}

	return nil
}

// LoadProductVariants allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productL) LoadProductVariants(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProduct interface{}, mods queries.Applicator) error {
	var slice []*Product
	var object *Product

	if singular {
		object = maybeProduct.(*Product)
	} else {
		slice = *maybeProduct.(*[]*Product)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_variant`),
		qm.WhereIn(`product_variant.product_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load product_variant")
	}

	var resultSlice []*ProductVariant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice product_variant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on product_variant")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_variant")
	}

	if len(productVariantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductVariants = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productVariantR{}
			}
			foreign.R.Product = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ProductID) {
				local.R.ProductVariants = append(local.R.ProductVariants, foreign)
				if foreign.R == nil {
					foreign.R = &productVariantR{}
				}
				foreign.R.Product = local
				break
			}
		}
	}

	return nil
}

// AddCollections adds the given related objects to the existing relationships
// of the product, optionally inserting them as new records.
// Appends related to o.R.Collections.
// Sets related.R.Products appropriately.
func (o *Product) AddCollections(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Collection) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into `collection_product` (`product_id`, `collection_id`) values (?, ?)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &productR{
			Collections: related,
		}
	} else {
		o.R.Collections = append(o.R.Collections, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &collectionR{
				Products: ProductSlice{o},
			}
		} else {
			rel.R.Products = append(rel.R.Products, o)
		}
	}
	return nil
}

// SetCollections removes all previously related items of the
// product replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Products's Collections accordingly.
// Replaces o.R.Collections with related.
// Sets related.R.Products's Collections accordingly.
func (o *Product) SetCollections(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Collection) error {
	query := "delete from `collection_product` where `product_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeCollectionsFromProductsSlice(o, related)
	if o.R != nil {
		o.R.Collections = nil
	}
	return o.AddCollections(ctx, exec, insert, related...)
}

// RemoveCollections relationships from objects passed in.
// Removes related items from R.Collections (uses pointer comparison, removal does not keep order)
// Sets related.R.Products.
func (o *Product) RemoveCollections(ctx context.Context, exec boil.ContextExecutor, related ...*Collection) error {
	var err error
	query := fmt.Sprintf(
		"delete from `collection_product` where `product_id` = ? and `collection_id` in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeCollectionsFromProductsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Collections {
			if rel != ri {
				continue
			}

			ln := len(o.R.Collections)
			if ln > 1 && i < ln-1 {
				o.R.Collections[i] = o.R.Collections[ln-1]
			}
			o.R.Collections = o.R.Collections[:ln-1]
			break
		}
	}

	return nil
}

func removeCollectionsFromProductsSlice(o *Product, related []*Collection) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Products {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Products)
			if ln > 1 && i < ln-1 {
				rel.R.Products[i] = rel.R.Products[ln-1]
			}
			rel.R.Products = rel.R.Products[:ln-1]
			break
		}
	}
}

// AddProductImages adds the given related objects to the existing relationships
// of the product, optionally inserting them as new records.
// Appends related to o.R.ProductImages.
// Sets related.R.Product appropriately.
func (o *Product) AddProductImages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductImage) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `product_image` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"product_id"}),
				strmangle.WhereClause("`", "`", 0, productImagePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ProductID, rel.ImageID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductID = o.ID
		}
	}

	if o.R == nil {
		o.R = &productR{
			ProductImages: related,
		}
	} else {
		o.R.ProductImages = append(o.R.ProductImages, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productImageR{
				Product: o,
			}
		} else {
			rel.R.Product = o
		}
	}
	return nil
}

// AddProductOptions adds the given related objects to the existing relationships
// of the product, optionally inserting them as new records.
// Appends related to o.R.ProductOptions.
// Sets related.R.Product appropriately.
func (o *Product) AddProductOptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductOption) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProductID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `product_option` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"product_id"}),
				strmangle.WhereClause("`", "`", 0, productOptionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProductID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &productR{
			ProductOptions: related,
		}
	} else {
		o.R.ProductOptions = append(o.R.ProductOptions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productOptionR{
				Product: o,
			}
		} else {
			rel.R.Product = o
		}
	}
	return nil
}

// SetProductOptions removes all previously related items of the
// product replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Product's ProductOptions accordingly.
// Replaces o.R.ProductOptions with related.
// Sets related.R.Product's ProductOptions accordingly.
func (o *Product) SetProductOptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductOption) error {
	query := "update `product_option` set `product_id` = null where `product_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ProductOptions {
			queries.SetScanner(&rel.ProductID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Product = nil
		}

		o.R.ProductOptions = nil
	}
	return o.AddProductOptions(ctx, exec, insert, related...)
}

// RemoveProductOptions relationships from objects passed in.
// Removes related items from R.ProductOptions (uses pointer comparison, removal does not keep order)
// Sets related.R.Product.
func (o *Product) RemoveProductOptions(ctx context.Context, exec boil.ContextExecutor, related ...*ProductOption) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProductID, nil)
		if rel.R != nil {
			rel.R.Product = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("product_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductOptions {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductOptions)
			if ln > 1 && i < ln-1 {
				o.R.ProductOptions[i] = o.R.ProductOptions[ln-1]
			}
			o.R.ProductOptions = o.R.ProductOptions[:ln-1]
			break
		}
	}

	return nil
}

// AddProductTags adds the given related objects to the existing relationships
// of the product, optionally inserting them as new records.
// Appends related to o.R.ProductTags.
// Sets related.R.Product appropriately.
func (o *Product) AddProductTags(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductTag) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `product_tag` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"product_id"}),
				strmangle.WhereClause("`", "`", 0, productTagPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.TagID, rel.ProductID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductID = o.ID
		}
	}

	if o.R == nil {
		o.R = &productR{
			ProductTags: related,
		}
	} else {
		o.R.ProductTags = append(o.R.ProductTags, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productTagR{
				Product: o,
			}
		} else {
			rel.R.Product = o
		}
	}
	return nil
}

// AddProductVariants adds the given related objects to the existing relationships
// of the product, optionally inserting them as new records.
// Appends related to o.R.ProductVariants.
// Sets related.R.Product appropriately.
func (o *Product) AddProductVariants(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductVariant) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProductID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `product_variant` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"product_id"}),
				strmangle.WhereClause("`", "`", 0, productVariantPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProductID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &productR{
			ProductVariants: related,
		}
	} else {
		o.R.ProductVariants = append(o.R.ProductVariants, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productVariantR{
				Product: o,
			}
		} else {
			rel.R.Product = o
		}
	}
	return nil
}

// SetProductVariants removes all previously related items of the
// product replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Product's ProductVariants accordingly.
// Replaces o.R.ProductVariants with related.
// Sets related.R.Product's ProductVariants accordingly.
func (o *Product) SetProductVariants(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductVariant) error {
	query := "update `product_variant` set `product_id` = null where `product_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ProductVariants {
			queries.SetScanner(&rel.ProductID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Product = nil
		}

		o.R.ProductVariants = nil
	}
	return o.AddProductVariants(ctx, exec, insert, related...)
}

// RemoveProductVariants relationships from objects passed in.
// Removes related items from R.ProductVariants (uses pointer comparison, removal does not keep order)
// Sets related.R.Product.
func (o *Product) RemoveProductVariants(ctx context.Context, exec boil.ContextExecutor, related ...*ProductVariant) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProductID, nil)
		if rel.R != nil {
			rel.R.Product = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("product_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductVariants {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductVariants)
			if ln > 1 && i < ln-1 {
				o.R.ProductVariants[i] = o.R.ProductVariants[ln-1]
			}
			o.R.ProductVariants = o.R.ProductVariants[:ln-1]
			break
		}
	}

	return nil
}

// Products retrieves all the records using an executor.
func Products(mods ...qm.QueryMod) productQuery {
	mods = append(mods, qm.From("`product`"))
	return productQuery{NewQuery(mods...)}
}

// FindProduct retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProduct(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Product, error) {
	productObj := &Product{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `product` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, productObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from product")
	}

	return productObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Product) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no product provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productInsertCacheMut.RLock()
	cache, cached := productInsertCache[key]
	productInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productAllColumns,
			productColumnsWithDefault,
			productColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(productType, productMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productType, productMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `product` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `product` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `product` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, productPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into product")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for product")
	}

CacheNoHooks:
	if !cached {
		productInsertCacheMut.Lock()
		productInsertCache[key] = cache
		productInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Product.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Product) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productUpdateCacheMut.RLock()
	cache, cached := productUpdateCache[key]
	productUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productAllColumns,
			productPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update product, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `product` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, productPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productType, productMapping, append(wl, productPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update product row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for product")
	}

	if !cached {
		productUpdateCacheMut.Lock()
		productUpdateCache[key] = cache
		productUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q productQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for product")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for product")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `product` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in product slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all product")
	}
	return rowsAff, nil
}

var mySQLProductUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Product) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no product provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLProductUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productUpsertCacheMut.RLock()
	cache, cached := productUpsertCache[key]
	productUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			productAllColumns,
			productColumnsWithDefault,
			productColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			productAllColumns,
			productPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert product, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`product`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `product` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(productType, productMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productType, productMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for product")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(productType, productMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for product")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for product")
	}

CacheNoHooks:
	if !cached {
		productUpsertCacheMut.Lock()
		productUpsertCache[key] = cache
		productUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Product record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Product) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Product provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productPrimaryKeyMapping)
	sql := "DELETE FROM `product` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from product")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for product")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q productQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no productQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from product")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for product")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `product` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from product slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for product")
	}

	if len(productAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Product) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProduct(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `product`.* FROM `product` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProductSlice")
	}

	*o = slice

	return nil
}

// ProductExists checks if the Product row exists.
func ProductExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `product` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if product exists")
	}

	return exists, nil
}
