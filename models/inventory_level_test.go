// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testInventoryLevels(t *testing.T) {
	t.Parallel()

	query := InventoryLevels()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testInventoryLevelsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InventoryLevel{}
	if err = randomize.Struct(seed, o, inventoryLevelDBTypes, true, inventoryLevelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InventoryLevel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InventoryLevels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInventoryLevelsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InventoryLevel{}
	if err = randomize.Struct(seed, o, inventoryLevelDBTypes, true, inventoryLevelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InventoryLevel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := InventoryLevels().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InventoryLevels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInventoryLevelsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InventoryLevel{}
	if err = randomize.Struct(seed, o, inventoryLevelDBTypes, true, inventoryLevelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InventoryLevel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InventoryLevelSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InventoryLevels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInventoryLevelsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InventoryLevel{}
	if err = randomize.Struct(seed, o, inventoryLevelDBTypes, true, inventoryLevelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InventoryLevel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := InventoryLevelExists(ctx, tx, o.InventoryItemID, o.LocationID)
	if err != nil {
		t.Errorf("Unable to check if InventoryLevel exists: %s", err)
	}
	if !e {
		t.Errorf("Expected InventoryLevelExists to return true, but got false.")
	}
}

func testInventoryLevelsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InventoryLevel{}
	if err = randomize.Struct(seed, o, inventoryLevelDBTypes, true, inventoryLevelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InventoryLevel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	inventoryLevelFound, err := FindInventoryLevel(ctx, tx, o.InventoryItemID, o.LocationID)
	if err != nil {
		t.Error(err)
	}

	if inventoryLevelFound == nil {
		t.Error("want a record, got nil")
	}
}

func testInventoryLevelsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InventoryLevel{}
	if err = randomize.Struct(seed, o, inventoryLevelDBTypes, true, inventoryLevelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InventoryLevel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = InventoryLevels().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testInventoryLevelsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InventoryLevel{}
	if err = randomize.Struct(seed, o, inventoryLevelDBTypes, true, inventoryLevelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InventoryLevel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := InventoryLevels().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testInventoryLevelsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	inventoryLevelOne := &InventoryLevel{}
	inventoryLevelTwo := &InventoryLevel{}
	if err = randomize.Struct(seed, inventoryLevelOne, inventoryLevelDBTypes, false, inventoryLevelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InventoryLevel struct: %s", err)
	}
	if err = randomize.Struct(seed, inventoryLevelTwo, inventoryLevelDBTypes, false, inventoryLevelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InventoryLevel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = inventoryLevelOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = inventoryLevelTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := InventoryLevels().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testInventoryLevelsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	inventoryLevelOne := &InventoryLevel{}
	inventoryLevelTwo := &InventoryLevel{}
	if err = randomize.Struct(seed, inventoryLevelOne, inventoryLevelDBTypes, false, inventoryLevelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InventoryLevel struct: %s", err)
	}
	if err = randomize.Struct(seed, inventoryLevelTwo, inventoryLevelDBTypes, false, inventoryLevelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InventoryLevel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = inventoryLevelOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = inventoryLevelTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InventoryLevels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func inventoryLevelBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *InventoryLevel) error {
	*o = InventoryLevel{}
	return nil
}

func inventoryLevelAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *InventoryLevel) error {
	*o = InventoryLevel{}
	return nil
}

func inventoryLevelAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *InventoryLevel) error {
	*o = InventoryLevel{}
	return nil
}

func inventoryLevelBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *InventoryLevel) error {
	*o = InventoryLevel{}
	return nil
}

func inventoryLevelAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *InventoryLevel) error {
	*o = InventoryLevel{}
	return nil
}

func inventoryLevelBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *InventoryLevel) error {
	*o = InventoryLevel{}
	return nil
}

func inventoryLevelAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *InventoryLevel) error {
	*o = InventoryLevel{}
	return nil
}

func inventoryLevelBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *InventoryLevel) error {
	*o = InventoryLevel{}
	return nil
}

func inventoryLevelAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *InventoryLevel) error {
	*o = InventoryLevel{}
	return nil
}

func testInventoryLevelsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &InventoryLevel{}
	o := &InventoryLevel{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, inventoryLevelDBTypes, false); err != nil {
		t.Errorf("Unable to randomize InventoryLevel object: %s", err)
	}

	AddInventoryLevelHook(boil.BeforeInsertHook, inventoryLevelBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	inventoryLevelBeforeInsertHooks = []InventoryLevelHook{}

	AddInventoryLevelHook(boil.AfterInsertHook, inventoryLevelAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	inventoryLevelAfterInsertHooks = []InventoryLevelHook{}

	AddInventoryLevelHook(boil.AfterSelectHook, inventoryLevelAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	inventoryLevelAfterSelectHooks = []InventoryLevelHook{}

	AddInventoryLevelHook(boil.BeforeUpdateHook, inventoryLevelBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	inventoryLevelBeforeUpdateHooks = []InventoryLevelHook{}

	AddInventoryLevelHook(boil.AfterUpdateHook, inventoryLevelAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	inventoryLevelAfterUpdateHooks = []InventoryLevelHook{}

	AddInventoryLevelHook(boil.BeforeDeleteHook, inventoryLevelBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	inventoryLevelBeforeDeleteHooks = []InventoryLevelHook{}

	AddInventoryLevelHook(boil.AfterDeleteHook, inventoryLevelAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	inventoryLevelAfterDeleteHooks = []InventoryLevelHook{}

	AddInventoryLevelHook(boil.BeforeUpsertHook, inventoryLevelBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	inventoryLevelBeforeUpsertHooks = []InventoryLevelHook{}

	AddInventoryLevelHook(boil.AfterUpsertHook, inventoryLevelAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	inventoryLevelAfterUpsertHooks = []InventoryLevelHook{}
}

func testInventoryLevelsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InventoryLevel{}
	if err = randomize.Struct(seed, o, inventoryLevelDBTypes, true, inventoryLevelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InventoryLevel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InventoryLevels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInventoryLevelsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InventoryLevel{}
	if err = randomize.Struct(seed, o, inventoryLevelDBTypes, true); err != nil {
		t.Errorf("Unable to randomize InventoryLevel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(inventoryLevelColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := InventoryLevels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInventoryLevelToOneInventoryItemUsingInventoryItem(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local InventoryLevel
	var foreign InventoryItem

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, inventoryLevelDBTypes, false, inventoryLevelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InventoryLevel struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, inventoryItemDBTypes, false, inventoryItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InventoryItem struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.InventoryItemID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.InventoryItem().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := InventoryLevelSlice{&local}
	if err = local.L.LoadInventoryItem(ctx, tx, false, (*[]*InventoryLevel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.InventoryItem == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.InventoryItem = nil
	if err = local.L.LoadInventoryItem(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.InventoryItem == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testInventoryLevelToOneLocationUsingLocation(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local InventoryLevel
	var foreign Location

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, inventoryLevelDBTypes, false, inventoryLevelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InventoryLevel struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, locationDBTypes, false, locationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Location struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.LocationID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Location().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := InventoryLevelSlice{&local}
	if err = local.L.LoadLocation(ctx, tx, false, (*[]*InventoryLevel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Location == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Location = nil
	if err = local.L.LoadLocation(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Location == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testInventoryLevelToOneSetOpInventoryItemUsingInventoryItem(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a InventoryLevel
	var b, c InventoryItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, inventoryLevelDBTypes, false, strmangle.SetComplement(inventoryLevelPrimaryKeyColumns, inventoryLevelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, inventoryItemDBTypes, false, strmangle.SetComplement(inventoryItemPrimaryKeyColumns, inventoryItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, inventoryItemDBTypes, false, strmangle.SetComplement(inventoryItemPrimaryKeyColumns, inventoryItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*InventoryItem{&b, &c} {
		err = a.SetInventoryItem(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.InventoryItem != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.InventoryLevels[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.InventoryItemID != x.ID {
			t.Error("foreign key was wrong value", a.InventoryItemID)
		}

		if exists, err := InventoryLevelExists(ctx, tx, a.InventoryItemID, a.LocationID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testInventoryLevelToOneSetOpLocationUsingLocation(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a InventoryLevel
	var b, c Location

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, inventoryLevelDBTypes, false, strmangle.SetComplement(inventoryLevelPrimaryKeyColumns, inventoryLevelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, locationDBTypes, false, strmangle.SetComplement(locationPrimaryKeyColumns, locationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, locationDBTypes, false, strmangle.SetComplement(locationPrimaryKeyColumns, locationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Location{&b, &c} {
		err = a.SetLocation(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Location != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.InventoryLevels[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.LocationID != x.ID {
			t.Error("foreign key was wrong value", a.LocationID)
		}

		if exists, err := InventoryLevelExists(ctx, tx, a.InventoryItemID, a.LocationID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testInventoryLevelsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InventoryLevel{}
	if err = randomize.Struct(seed, o, inventoryLevelDBTypes, true, inventoryLevelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InventoryLevel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInventoryLevelsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InventoryLevel{}
	if err = randomize.Struct(seed, o, inventoryLevelDBTypes, true, inventoryLevelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InventoryLevel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InventoryLevelSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInventoryLevelsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InventoryLevel{}
	if err = randomize.Struct(seed, o, inventoryLevelDBTypes, true, inventoryLevelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InventoryLevel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := InventoryLevels().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	inventoryLevelDBTypes = map[string]string{`InventoryItemID`: `bigint`, `LocationID`: `bigint`, `Available`: `int`, `UpdatedAt`: `datetime`}
	_                     = bytes.MinRead
)

func testInventoryLevelsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(inventoryLevelPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(inventoryLevelAllColumns) == len(inventoryLevelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &InventoryLevel{}
	if err = randomize.Struct(seed, o, inventoryLevelDBTypes, true, inventoryLevelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InventoryLevel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InventoryLevels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, inventoryLevelDBTypes, true, inventoryLevelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InventoryLevel struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testInventoryLevelsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(inventoryLevelAllColumns) == len(inventoryLevelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &InventoryLevel{}
	if err = randomize.Struct(seed, o, inventoryLevelDBTypes, true, inventoryLevelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InventoryLevel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InventoryLevels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, inventoryLevelDBTypes, true, inventoryLevelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InventoryLevel struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(inventoryLevelAllColumns, inventoryLevelPrimaryKeyColumns) {
		fields = inventoryLevelAllColumns
	} else {
		fields = strmangle.SetComplement(
			inventoryLevelAllColumns,
			inventoryLevelPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := InventoryLevelSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testInventoryLevelsUpsert(t *testing.T) {
	t.Parallel()

	if len(inventoryLevelAllColumns) == len(inventoryLevelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLInventoryLevelUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := InventoryLevel{}
	if err = randomize.Struct(seed, &o, inventoryLevelDBTypes, false); err != nil {
		t.Errorf("Unable to randomize InventoryLevel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert InventoryLevel: %s", err)
	}

	count, err := InventoryLevels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, inventoryLevelDBTypes, false, inventoryLevelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InventoryLevel struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert InventoryLevel: %s", err)
	}

	count, err = InventoryLevels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
