// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testProductOptions(t *testing.T) {
	t.Parallel()

	query := ProductOptions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testProductOptionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductOption{}
	if err = randomize.Struct(seed, o, productOptionDBTypes, true, productOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProductOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProductOptionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductOption{}
	if err = randomize.Struct(seed, o, productOptionDBTypes, true, productOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ProductOptions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProductOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProductOptionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductOption{}
	if err = randomize.Struct(seed, o, productOptionDBTypes, true, productOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProductOptionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProductOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProductOptionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductOption{}
	if err = randomize.Struct(seed, o, productOptionDBTypes, true, productOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ProductOptionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ProductOption exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ProductOptionExists to return true, but got false.")
	}
}

func testProductOptionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductOption{}
	if err = randomize.Struct(seed, o, productOptionDBTypes, true, productOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	productOptionFound, err := FindProductOption(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if productOptionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testProductOptionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductOption{}
	if err = randomize.Struct(seed, o, productOptionDBTypes, true, productOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ProductOptions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testProductOptionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductOption{}
	if err = randomize.Struct(seed, o, productOptionDBTypes, true, productOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ProductOptions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testProductOptionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	productOptionOne := &ProductOption{}
	productOptionTwo := &ProductOption{}
	if err = randomize.Struct(seed, productOptionOne, productOptionDBTypes, false, productOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOption struct: %s", err)
	}
	if err = randomize.Struct(seed, productOptionTwo, productOptionDBTypes, false, productOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = productOptionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = productOptionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProductOptions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testProductOptionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	productOptionOne := &ProductOption{}
	productOptionTwo := &ProductOption{}
	if err = randomize.Struct(seed, productOptionOne, productOptionDBTypes, false, productOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOption struct: %s", err)
	}
	if err = randomize.Struct(seed, productOptionTwo, productOptionDBTypes, false, productOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = productOptionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = productOptionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProductOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func productOptionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProductOption) error {
	*o = ProductOption{}
	return nil
}

func productOptionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProductOption) error {
	*o = ProductOption{}
	return nil
}

func productOptionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ProductOption) error {
	*o = ProductOption{}
	return nil
}

func productOptionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProductOption) error {
	*o = ProductOption{}
	return nil
}

func productOptionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProductOption) error {
	*o = ProductOption{}
	return nil
}

func productOptionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProductOption) error {
	*o = ProductOption{}
	return nil
}

func productOptionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProductOption) error {
	*o = ProductOption{}
	return nil
}

func productOptionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProductOption) error {
	*o = ProductOption{}
	return nil
}

func productOptionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProductOption) error {
	*o = ProductOption{}
	return nil
}

func testProductOptionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ProductOption{}
	o := &ProductOption{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, productOptionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ProductOption object: %s", err)
	}

	AddProductOptionHook(boil.BeforeInsertHook, productOptionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	productOptionBeforeInsertHooks = []ProductOptionHook{}

	AddProductOptionHook(boil.AfterInsertHook, productOptionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	productOptionAfterInsertHooks = []ProductOptionHook{}

	AddProductOptionHook(boil.AfterSelectHook, productOptionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	productOptionAfterSelectHooks = []ProductOptionHook{}

	AddProductOptionHook(boil.BeforeUpdateHook, productOptionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	productOptionBeforeUpdateHooks = []ProductOptionHook{}

	AddProductOptionHook(boil.AfterUpdateHook, productOptionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	productOptionAfterUpdateHooks = []ProductOptionHook{}

	AddProductOptionHook(boil.BeforeDeleteHook, productOptionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	productOptionBeforeDeleteHooks = []ProductOptionHook{}

	AddProductOptionHook(boil.AfterDeleteHook, productOptionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	productOptionAfterDeleteHooks = []ProductOptionHook{}

	AddProductOptionHook(boil.BeforeUpsertHook, productOptionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	productOptionBeforeUpsertHooks = []ProductOptionHook{}

	AddProductOptionHook(boil.AfterUpsertHook, productOptionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	productOptionAfterUpsertHooks = []ProductOptionHook{}
}

func testProductOptionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductOption{}
	if err = randomize.Struct(seed, o, productOptionDBTypes, true, productOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProductOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProductOptionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductOption{}
	if err = randomize.Struct(seed, o, productOptionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ProductOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(productOptionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ProductOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProductOptionOneToOneProductOptionValueUsingOptionProductOptionValue(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign ProductOptionValue
	var local ProductOption

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, productOptionValueDBTypes, true, productOptionValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOptionValue struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, productOptionDBTypes, true, productOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOption struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.OptionID = local.ID
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.OptionProductOptionValue().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.OptionID != foreign.OptionID {
		t.Errorf("want: %v, got %v", foreign.OptionID, check.OptionID)
	}

	slice := ProductOptionSlice{&local}
	if err = local.L.LoadOptionProductOptionValue(ctx, tx, false, (*[]*ProductOption)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OptionProductOptionValue == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.OptionProductOptionValue = nil
	if err = local.L.LoadOptionProductOptionValue(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OptionProductOptionValue == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testProductOptionOneToOneSetOpProductOptionValueUsingOptionProductOptionValue(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductOption
	var b, c ProductOptionValue

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productOptionDBTypes, false, strmangle.SetComplement(productOptionPrimaryKeyColumns, productOptionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productOptionValueDBTypes, false, strmangle.SetComplement(productOptionValuePrimaryKeyColumns, productOptionValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productOptionValueDBTypes, false, strmangle.SetComplement(productOptionValuePrimaryKeyColumns, productOptionValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ProductOptionValue{&b, &c} {
		err = a.SetOptionProductOptionValue(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.OptionProductOptionValue != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.Option != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.ID != x.OptionID {
			t.Error("foreign key was wrong value", a.ID)
		}

		if exists, err := ProductOptionValueExists(ctx, tx, x.OptionID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'x' to exist")
		}

		if a.ID != x.OptionID {
			t.Error("foreign key was wrong value", a.ID, x.OptionID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testProductOptionToOneProductUsingProduct(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ProductOption
	var foreign Product

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, productOptionDBTypes, false, productOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOption struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, productDBTypes, false, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ProductID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Product().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ProductOptionSlice{&local}
	if err = local.L.LoadProduct(ctx, tx, false, (*[]*ProductOption)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Product == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Product = nil
	if err = local.L.LoadProduct(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Product == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testProductOptionToOneSetOpProductUsingProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductOption
	var b, c Product

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productOptionDBTypes, false, strmangle.SetComplement(productOptionPrimaryKeyColumns, productOptionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Product{&b, &c} {
		err = a.SetProduct(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Product != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProductOptions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ProductID != x.ID {
			t.Error("foreign key was wrong value", a.ProductID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProductID))
		reflect.Indirect(reflect.ValueOf(&a.ProductID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ProductID != x.ID {
			t.Error("foreign key was wrong value", a.ProductID, x.ID)
		}
	}
}

func testProductOptionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductOption{}
	if err = randomize.Struct(seed, o, productOptionDBTypes, true, productOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProductOptionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductOption{}
	if err = randomize.Struct(seed, o, productOptionDBTypes, true, productOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProductOptionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProductOptionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductOption{}
	if err = randomize.Struct(seed, o, productOptionDBTypes, true, productOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProductOptions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	productOptionDBTypes = map[string]string{`ID`: `bigint`, `ProductID`: `bigint`, `Position`: `int`, `Name`: `varchar`}
	_                    = bytes.MinRead
)

func testProductOptionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(productOptionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(productOptionAllColumns) == len(productOptionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProductOption{}
	if err = randomize.Struct(seed, o, productOptionDBTypes, true, productOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProductOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, productOptionDBTypes, true, productOptionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProductOption struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testProductOptionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(productOptionAllColumns) == len(productOptionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProductOption{}
	if err = randomize.Struct(seed, o, productOptionDBTypes, true, productOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProductOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, productOptionDBTypes, true, productOptionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProductOption struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(productOptionAllColumns, productOptionPrimaryKeyColumns) {
		fields = productOptionAllColumns
	} else {
		fields = strmangle.SetComplement(
			productOptionAllColumns,
			productOptionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ProductOptionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testProductOptionsUpsert(t *testing.T) {
	t.Parallel()

	if len(productOptionAllColumns) == len(productOptionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLProductOptionUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ProductOption{}
	if err = randomize.Struct(seed, &o, productOptionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ProductOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProductOption: %s", err)
	}

	count, err := ProductOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, productOptionDBTypes, false, productOptionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProductOption struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProductOption: %s", err)
	}

	count, err = ProductOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
