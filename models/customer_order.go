// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// CustomerOrder is an object representing the database table.
type CustomerOrder struct {
	ID                  int64         `boil:"id" json:"id" toml:"id" yaml:"id"`
	OrderNumber         int           `boil:"order_number" json:"order_number" toml:"order_number" yaml:"order_number"`
	Name                string        `boil:"name" json:"name" toml:"name" yaml:"name"`
	Note                null.String   `boil:"note" json:"note,omitempty" toml:"note" yaml:"note,omitempty"`
	Email               string        `boil:"email" json:"email" toml:"email" yaml:"email"`
	FinancialStatus     string        `boil:"financial_status" json:"financial_status" toml:"financial_status" yaml:"financial_status"`
	FulfillmentStatus   string        `boil:"fulfillment_status" json:"fulfillment_status" toml:"fulfillment_status" yaml:"fulfillment_status"`
	TotalDiscounts      types.Decimal `boil:"total_discounts" json:"total_discounts" toml:"total_discounts" yaml:"total_discounts"`
	TotalLineItemsPrice types.Decimal `boil:"total_line_items_price" json:"total_line_items_price" toml:"total_line_items_price" yaml:"total_line_items_price"`
	TotalOutstanding    types.Decimal `boil:"total_outstanding" json:"total_outstanding" toml:"total_outstanding" yaml:"total_outstanding"`
	TotalPrice          types.Decimal `boil:"total_price" json:"total_price" toml:"total_price" yaml:"total_price"`
	TotalTax            types.Decimal `boil:"total_tax" json:"total_tax" toml:"total_tax" yaml:"total_tax"`
	CreatedAt           null.Time     `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt           null.Time     `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	ProcessedAt         null.Time     `boil:"processed_at" json:"processed_at,omitempty" toml:"processed_at" yaml:"processed_at,omitempty"`
	CancelledAt         null.Time     `boil:"cancelled_at" json:"cancelled_at,omitempty" toml:"cancelled_at" yaml:"cancelled_at,omitempty"`
	ClosedAt            null.Time     `boil:"closed_at" json:"closed_at,omitempty" toml:"closed_at" yaml:"closed_at,omitempty"`

	R *customerOrderR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L customerOrderL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CustomerOrderColumns = struct {
	ID                  string
	OrderNumber         string
	Name                string
	Note                string
	Email               string
	FinancialStatus     string
	FulfillmentStatus   string
	TotalDiscounts      string
	TotalLineItemsPrice string
	TotalOutstanding    string
	TotalPrice          string
	TotalTax            string
	CreatedAt           string
	UpdatedAt           string
	ProcessedAt         string
	CancelledAt         string
	ClosedAt            string
}{
	ID:                  "id",
	OrderNumber:         "order_number",
	Name:                "name",
	Note:                "note",
	Email:               "email",
	FinancialStatus:     "financial_status",
	FulfillmentStatus:   "fulfillment_status",
	TotalDiscounts:      "total_discounts",
	TotalLineItemsPrice: "total_line_items_price",
	TotalOutstanding:    "total_outstanding",
	TotalPrice:          "total_price",
	TotalTax:            "total_tax",
	CreatedAt:           "created_at",
	UpdatedAt:           "updated_at",
	ProcessedAt:         "processed_at",
	CancelledAt:         "cancelled_at",
	ClosedAt:            "closed_at",
}

var CustomerOrderTableColumns = struct {
	ID                  string
	OrderNumber         string
	Name                string
	Note                string
	Email               string
	FinancialStatus     string
	FulfillmentStatus   string
	TotalDiscounts      string
	TotalLineItemsPrice string
	TotalOutstanding    string
	TotalPrice          string
	TotalTax            string
	CreatedAt           string
	UpdatedAt           string
	ProcessedAt         string
	CancelledAt         string
	ClosedAt            string
}{
	ID:                  "customer_order.id",
	OrderNumber:         "customer_order.order_number",
	Name:                "customer_order.name",
	Note:                "customer_order.note",
	Email:               "customer_order.email",
	FinancialStatus:     "customer_order.financial_status",
	FulfillmentStatus:   "customer_order.fulfillment_status",
	TotalDiscounts:      "customer_order.total_discounts",
	TotalLineItemsPrice: "customer_order.total_line_items_price",
	TotalOutstanding:    "customer_order.total_outstanding",
	TotalPrice:          "customer_order.total_price",
	TotalTax:            "customer_order.total_tax",
	CreatedAt:           "customer_order.created_at",
	UpdatedAt:           "customer_order.updated_at",
	ProcessedAt:         "customer_order.processed_at",
	CancelledAt:         "customer_order.cancelled_at",
	ClosedAt:            "customer_order.closed_at",
}

// Generated where

var CustomerOrderWhere = struct {
	ID                  whereHelperint64
	OrderNumber         whereHelperint
	Name                whereHelperstring
	Note                whereHelpernull_String
	Email               whereHelperstring
	FinancialStatus     whereHelperstring
	FulfillmentStatus   whereHelperstring
	TotalDiscounts      whereHelpertypes_Decimal
	TotalLineItemsPrice whereHelpertypes_Decimal
	TotalOutstanding    whereHelpertypes_Decimal
	TotalPrice          whereHelpertypes_Decimal
	TotalTax            whereHelpertypes_Decimal
	CreatedAt           whereHelpernull_Time
	UpdatedAt           whereHelpernull_Time
	ProcessedAt         whereHelpernull_Time
	CancelledAt         whereHelpernull_Time
	ClosedAt            whereHelpernull_Time
}{
	ID:                  whereHelperint64{field: "`customer_order`.`id`"},
	OrderNumber:         whereHelperint{field: "`customer_order`.`order_number`"},
	Name:                whereHelperstring{field: "`customer_order`.`name`"},
	Note:                whereHelpernull_String{field: "`customer_order`.`note`"},
	Email:               whereHelperstring{field: "`customer_order`.`email`"},
	FinancialStatus:     whereHelperstring{field: "`customer_order`.`financial_status`"},
	FulfillmentStatus:   whereHelperstring{field: "`customer_order`.`fulfillment_status`"},
	TotalDiscounts:      whereHelpertypes_Decimal{field: "`customer_order`.`total_discounts`"},
	TotalLineItemsPrice: whereHelpertypes_Decimal{field: "`customer_order`.`total_line_items_price`"},
	TotalOutstanding:    whereHelpertypes_Decimal{field: "`customer_order`.`total_outstanding`"},
	TotalPrice:          whereHelpertypes_Decimal{field: "`customer_order`.`total_price`"},
	TotalTax:            whereHelpertypes_Decimal{field: "`customer_order`.`total_tax`"},
	CreatedAt:           whereHelpernull_Time{field: "`customer_order`.`created_at`"},
	UpdatedAt:           whereHelpernull_Time{field: "`customer_order`.`updated_at`"},
	ProcessedAt:         whereHelpernull_Time{field: "`customer_order`.`processed_at`"},
	CancelledAt:         whereHelpernull_Time{field: "`customer_order`.`cancelled_at`"},
	ClosedAt:            whereHelpernull_Time{field: "`customer_order`.`closed_at`"},
}

// CustomerOrderRels is where relationship names are stored.
var CustomerOrderRels = struct {
	OrderOrderLines string
}{
	OrderOrderLines: "OrderOrderLines",
}

// customerOrderR is where relationships are stored.
type customerOrderR struct {
	OrderOrderLines OrderLineSlice `boil:"OrderOrderLines" json:"OrderOrderLines" toml:"OrderOrderLines" yaml:"OrderOrderLines"`
}

// NewStruct creates a new relationship struct
func (*customerOrderR) NewStruct() *customerOrderR {
	return &customerOrderR{}
}

// customerOrderL is where Load methods for each relationship are stored.
type customerOrderL struct{}

var (
	customerOrderAllColumns            = []string{"id", "order_number", "name", "note", "email", "financial_status", "fulfillment_status", "total_discounts", "total_line_items_price", "total_outstanding", "total_price", "total_tax", "created_at", "updated_at", "processed_at", "cancelled_at", "closed_at"}
	customerOrderColumnsWithoutDefault = []string{"id", "order_number", "name", "note", "email", "financial_status", "fulfillment_status", "total_discounts", "total_line_items_price", "total_outstanding", "total_price", "total_tax", "created_at", "updated_at", "processed_at", "cancelled_at", "closed_at"}
	customerOrderColumnsWithDefault    = []string{}
	customerOrderPrimaryKeyColumns     = []string{"id"}
)

type (
	// CustomerOrderSlice is an alias for a slice of pointers to CustomerOrder.
	// This should almost always be used instead of []CustomerOrder.
	CustomerOrderSlice []*CustomerOrder
	// CustomerOrderHook is the signature for custom CustomerOrder hook methods
	CustomerOrderHook func(context.Context, boil.ContextExecutor, *CustomerOrder) error

	customerOrderQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	customerOrderType                 = reflect.TypeOf(&CustomerOrder{})
	customerOrderMapping              = queries.MakeStructMapping(customerOrderType)
	customerOrderPrimaryKeyMapping, _ = queries.BindMapping(customerOrderType, customerOrderMapping, customerOrderPrimaryKeyColumns)
	customerOrderInsertCacheMut       sync.RWMutex
	customerOrderInsertCache          = make(map[string]insertCache)
	customerOrderUpdateCacheMut       sync.RWMutex
	customerOrderUpdateCache          = make(map[string]updateCache)
	customerOrderUpsertCacheMut       sync.RWMutex
	customerOrderUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var customerOrderBeforeInsertHooks []CustomerOrderHook
var customerOrderBeforeUpdateHooks []CustomerOrderHook
var customerOrderBeforeDeleteHooks []CustomerOrderHook
var customerOrderBeforeUpsertHooks []CustomerOrderHook

var customerOrderAfterInsertHooks []CustomerOrderHook
var customerOrderAfterSelectHooks []CustomerOrderHook
var customerOrderAfterUpdateHooks []CustomerOrderHook
var customerOrderAfterDeleteHooks []CustomerOrderHook
var customerOrderAfterUpsertHooks []CustomerOrderHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CustomerOrder) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerOrderBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CustomerOrder) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerOrderBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CustomerOrder) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerOrderBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CustomerOrder) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerOrderBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CustomerOrder) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerOrderAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CustomerOrder) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerOrderAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CustomerOrder) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerOrderAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CustomerOrder) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerOrderAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CustomerOrder) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerOrderAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCustomerOrderHook registers your hook function for all future operations.
func AddCustomerOrderHook(hookPoint boil.HookPoint, customerOrderHook CustomerOrderHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		customerOrderBeforeInsertHooks = append(customerOrderBeforeInsertHooks, customerOrderHook)
	case boil.BeforeUpdateHook:
		customerOrderBeforeUpdateHooks = append(customerOrderBeforeUpdateHooks, customerOrderHook)
	case boil.BeforeDeleteHook:
		customerOrderBeforeDeleteHooks = append(customerOrderBeforeDeleteHooks, customerOrderHook)
	case boil.BeforeUpsertHook:
		customerOrderBeforeUpsertHooks = append(customerOrderBeforeUpsertHooks, customerOrderHook)
	case boil.AfterInsertHook:
		customerOrderAfterInsertHooks = append(customerOrderAfterInsertHooks, customerOrderHook)
	case boil.AfterSelectHook:
		customerOrderAfterSelectHooks = append(customerOrderAfterSelectHooks, customerOrderHook)
	case boil.AfterUpdateHook:
		customerOrderAfterUpdateHooks = append(customerOrderAfterUpdateHooks, customerOrderHook)
	case boil.AfterDeleteHook:
		customerOrderAfterDeleteHooks = append(customerOrderAfterDeleteHooks, customerOrderHook)
	case boil.AfterUpsertHook:
		customerOrderAfterUpsertHooks = append(customerOrderAfterUpsertHooks, customerOrderHook)
	}
}

// One returns a single customerOrder record from the query.
func (q customerOrderQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CustomerOrder, error) {
	o := &CustomerOrder{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for customer_order")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CustomerOrder records from the query.
func (q customerOrderQuery) All(ctx context.Context, exec boil.ContextExecutor) (CustomerOrderSlice, error) {
	var o []*CustomerOrder

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CustomerOrder slice")
	}

	if len(customerOrderAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CustomerOrder records in the query.
func (q customerOrderQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count customer_order rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q customerOrderQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if customer_order exists")
	}

	return count > 0, nil
}

// OrderOrderLines retrieves all the order_line's OrderLines with an executor via order_id column.
func (o *CustomerOrder) OrderOrderLines(mods ...qm.QueryMod) orderLineQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`order_line`.`order_id`=?", o.ID),
	)

	query := OrderLines(queryMods...)
	queries.SetFrom(query.Query, "`order_line`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`order_line`.*"})
	}

	return query
}

// LoadOrderOrderLines allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (customerOrderL) LoadOrderOrderLines(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCustomerOrder interface{}, mods queries.Applicator) error {
	var slice []*CustomerOrder
	var object *CustomerOrder

	if singular {
		object = maybeCustomerOrder.(*CustomerOrder)
	} else {
		slice = *maybeCustomerOrder.(*[]*CustomerOrder)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &customerOrderR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &customerOrderR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`order_line`),
		qm.WhereIn(`order_line.order_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load order_line")
	}

	var resultSlice []*OrderLine
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice order_line")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on order_line")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for order_line")
	}

	if len(orderLineAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrderOrderLines = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderLineR{}
			}
			foreign.R.Order = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OrderID {
				local.R.OrderOrderLines = append(local.R.OrderOrderLines, foreign)
				if foreign.R == nil {
					foreign.R = &orderLineR{}
				}
				foreign.R.Order = local
				break
			}
		}
	}

	return nil
}

// AddOrderOrderLines adds the given related objects to the existing relationships
// of the customer_order, optionally inserting them as new records.
// Appends related to o.R.OrderOrderLines.
// Sets related.R.Order appropriately.
func (o *CustomerOrder) AddOrderOrderLines(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrderLine) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OrderID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `order_line` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"order_id"}),
				strmangle.WhereClause("`", "`", 0, orderLinePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OrderID = o.ID
		}
	}

	if o.R == nil {
		o.R = &customerOrderR{
			OrderOrderLines: related,
		}
	} else {
		o.R.OrderOrderLines = append(o.R.OrderOrderLines, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderLineR{
				Order: o,
			}
		} else {
			rel.R.Order = o
		}
	}
	return nil
}

// CustomerOrders retrieves all the records using an executor.
func CustomerOrders(mods ...qm.QueryMod) customerOrderQuery {
	mods = append(mods, qm.From("`customer_order`"))
	return customerOrderQuery{NewQuery(mods...)}
}

// FindCustomerOrder retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCustomerOrder(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*CustomerOrder, error) {
	customerOrderObj := &CustomerOrder{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `customer_order` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, customerOrderObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from customer_order")
	}

	if err = customerOrderObj.doAfterSelectHooks(ctx, exec); err != nil {
		return customerOrderObj, err
	}

	return customerOrderObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CustomerOrder) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no customer_order provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(customerOrderColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	customerOrderInsertCacheMut.RLock()
	cache, cached := customerOrderInsertCache[key]
	customerOrderInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			customerOrderAllColumns,
			customerOrderColumnsWithDefault,
			customerOrderColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(customerOrderType, customerOrderMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(customerOrderType, customerOrderMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `customer_order` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `customer_order` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `customer_order` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, customerOrderPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into customer_order")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for customer_order")
	}

CacheNoHooks:
	if !cached {
		customerOrderInsertCacheMut.Lock()
		customerOrderInsertCache[key] = cache
		customerOrderInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CustomerOrder.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CustomerOrder) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	customerOrderUpdateCacheMut.RLock()
	cache, cached := customerOrderUpdateCache[key]
	customerOrderUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			customerOrderAllColumns,
			customerOrderPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update customer_order, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `customer_order` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, customerOrderPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(customerOrderType, customerOrderMapping, append(wl, customerOrderPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update customer_order row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for customer_order")
	}

	if !cached {
		customerOrderUpdateCacheMut.Lock()
		customerOrderUpdateCache[key] = cache
		customerOrderUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q customerOrderQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for customer_order")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for customer_order")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CustomerOrderSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), customerOrderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `customer_order` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, customerOrderPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in customerOrder slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all customerOrder")
	}
	return rowsAff, nil
}

var mySQLCustomerOrderUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CustomerOrder) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no customer_order provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(customerOrderColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCustomerOrderUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	customerOrderUpsertCacheMut.RLock()
	cache, cached := customerOrderUpsertCache[key]
	customerOrderUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			customerOrderAllColumns,
			customerOrderColumnsWithDefault,
			customerOrderColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			customerOrderAllColumns,
			customerOrderPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert customer_order, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`customer_order`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `customer_order` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(customerOrderType, customerOrderMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(customerOrderType, customerOrderMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for customer_order")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(customerOrderType, customerOrderMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for customer_order")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for customer_order")
	}

CacheNoHooks:
	if !cached {
		customerOrderUpsertCacheMut.Lock()
		customerOrderUpsertCache[key] = cache
		customerOrderUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CustomerOrder record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CustomerOrder) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CustomerOrder provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), customerOrderPrimaryKeyMapping)
	sql := "DELETE FROM `customer_order` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from customer_order")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for customer_order")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q customerOrderQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no customerOrderQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from customer_order")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for customer_order")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CustomerOrderSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(customerOrderBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), customerOrderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `customer_order` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, customerOrderPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from customerOrder slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for customer_order")
	}

	if len(customerOrderAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CustomerOrder) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCustomerOrder(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CustomerOrderSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CustomerOrderSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), customerOrderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `customer_order`.* FROM `customer_order` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, customerOrderPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CustomerOrderSlice")
	}

	*o = slice

	return nil
}

// CustomerOrderExists checks if the CustomerOrder row exists.
func CustomerOrderExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `customer_order` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if customer_order exists")
	}

	return exists, nil
}
